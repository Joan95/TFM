joan@milax:~/Escriptori/TFM/TFM$ python -i demo/start_servers.py 
	-------- --------> [tuf/util.py]	>>Function:  [import_json()]:  Importing JSON
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'rsa', u'ed25519', u'general']
ImageRepo: Initializing repository
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]: Target files: [u'file1.txt', u'infotainment_firmware.txt']
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]: Removing files: /home/joan/Escriptori/TFM/TFM/imagerepo/targets
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]: Creating directories: /home/joan/Escriptori/TFM/TFM/imagerepo/targets
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]: Writing content for: [u'file1.txt', u'infotainment_firmware.txt']
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]: Target --> file1.txt
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]: Target --> infotainment_firmware.txt
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]: Creating new repository at: imagerepo
	--------> [tuf/repository_tool.py]	>>Function:  [create_new_repository()]:  Creating new repository_directory: imagerepo repository_name: default
Creating u'/home/joan/Escriptori/TFM/TFM/imagerepo'
Creating u'/home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged'
Creating u'/home/joan/Escriptori/TFM/TFM/imagerepo/targets'
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Initializating repository_directory: /home/joan/Escriptori/TFM/TFM/imagerepo metadata_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged targets_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/targets repository_name: default
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Setting the top-level roles
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Root.__init__()]:  Initializating root
	--------> [tuf/repository_tool.py]	>>Function:  [Root.__init__()]:  roleinfo:  {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-13T02:10:26Z', u'signing_keyids': []}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: root with roleinfo: {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-13T02:10:26Z', u'signing_keyids': []} with repository_name default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  root
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-13T02:10:26Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  default
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Root added to roleDB. Value for self.root:  <tuf.repository_tool.Root object at 0x7f47d0fd13d0>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Initializating Snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Value for self._rolename:  snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Value for self._repository_name:  default
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: snapshot with roleinfo: {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-20T20:22:06Z', u'signing_keyids': []} with repository_name default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  snapshot
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-20T20:22:06Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  default
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.snapshot:  <tuf.repository_tool.Snapshot object at 0x7f47d0fd1390>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Initializating Timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Value for self._rolename:  timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Value for self._repository_name:  default
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: timestamp with roleinfo: {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-14T20:22:06Z', u'signing_keyids': []} with repository_name default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  timestamp
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-14T20:22:06Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  default
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.timestamp:  <tuf.repository_tool.Timestamp object at 0x7f47d0fd1410>
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Initializating Targets
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._targets_directory:  /home/joan/Escriptori/TFM/TFM/imagerepo/targets
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._rolename:  targets
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._repository_name:  default
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._target_files:  []
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._delegated_roles:  {}
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._parent_targets_object:  <tuf.repository_tool.Targets object at 0x7f47d0fd1450>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: targets with roleinfo: {u'signatures': [], u'keyids': [], u'expires': u'2020-05-15T03:49:16Z', u'threshold': 1, u'signing_keyids': [], u'paths': {}, u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'delegations': {u'keys': {}, u'roles': []}, u'path_hash_prefixes': []} with repository_name default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  targets
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'signatures': [], u'keyids': [], u'expires': u'2020-05-15T03:49:16Z', u'threshold': 1, u'signing_keyids': [], u'paths': {}, u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'delegations': {u'keys': {}, u'roles': []}, u'path_hash_prefixes': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  default
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.targets:  <tuf.repository_tool.Targets object at 0x7f47d0fd1450>
	--------> [tuf/repository_tool.py]	>>Function:  [create_new_repository()]:  returning 
ImageRepo: Loading all keys
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]: Loading keys...
	-------->[demo/__init__.py]	>>Action Perfomed:  [import_public_key()]:  Importing public key keyname: mainroot
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  Importing ed25519 publickey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/mainroot.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  Loading JSON file for filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/mainroot.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  Constructing TUF key dictionary for key_metadata: {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'} hash_algorithm: sha512
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  key_root_pub: {u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}, u'keytype': u'ed25519', u'keyid': '94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyid_hash_algorithms': [u'sha256', u'sha512']}
	-------->[demo/__init__.py]	>>Action Perfomed:  [import_private_key()]:  Importing private key keyname: mainroot
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Importing ed25519 privatekey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/mainroot password: pw
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]: Store the encrypted contents of '/home/joan/Escriptori/TFM/TFM/demo/keys/mainroot' prior to calling the decryption routine
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  Return a string containing encrypted_key: 51075d30033b3b952cdba36bf2f0b6d8@@@@100000@@@@e32a19473754896ae175b6aea30cc9703bc8fc34acc40809ee890f8351815b58@@@@e2e82069cae0ec30789fad039385af60@@@@48e67f6481ab927dca5b9925ed31ea4eb9711cb4acfe7bd8ec4530366fc73a1e3d7146c0642fb8f76bd127cda78ff9df06c661b871553d0ed8d136aff2305b154b8b937e010c5edb311bb16e227b9dfbda5c21a2175e8c04c2750660f42a2b5f17059695ebaebdf0066a064cc90cc2b93d90a4c2e77b13fd2551e74046fa9e3dd90f2449ddbb21a5a66b86c5faea3c870abf8b690ba961f91a6d3344e7965de103e8a815a43e0214867d5ab2bfbbfbbcf241c00885cdcd1633b0af9e0d2084b6a9499c3d0a494f29da17b5a4db801da077f731ce7276974d4e7023d9fc596ff2bb0b573e2c88d5226ecfc0fea366069bf4e948512839be0938d6be9d52eb9fb639c5f1fd721ce1f4c79915fe in non-encrypted form, using passphrase: pw
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'general']
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  Decrypting encrypted_key: 51075d30033b3b952cdba36bf2f0b6d8@@@@100000@@@@e32a19473754896ae175b6aea30cc9703bc8fc34acc40809ee890f8351815b58@@@@e2e82069cae0ec30789fad039385af60@@@@48e67f6481ab927dca5b9925ed31ea4eb9711cb4acfe7bd8ec4530366fc73a1e3d7146c0642fb8f76bd127cda78ff9df06c661b871553d0ed8d136aff2305b154b8b937e010c5edb311bb16e227b9dfbda5c21a2175e8c04c2750660f42a2b5f17059695ebaebdf0066a064cc90cc2b93d90a4c2e77b13fd2551e74046fa9e3dd90f2449ddbb21a5a66b86c5faea3c870abf8b690ba961f91a6d3344e7965de103e8a815a43e0214867d5ab2bfbbfbbcf241c00885cdcd1633b0af9e0d2084b6a9499c3d0a494f29da17b5a4db801da077f731ce7276974d4e7023d9fc596ff2bb0b573e2c88d5226ecfc0fea366069bf4e948512839be0938d6be9d52eb9fb639c5f1fd721ce1f4c79915fe password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  Decrypting file_contents: 51075d30033b3b952cdba36bf2f0b6d8@@@@100000@@@@e32a19473754896ae175b6aea30cc9703bc8fc34acc40809ee890f8351815b58@@@@e2e82069cae0ec30789fad039385af60@@@@48e67f6481ab927dca5b9925ed31ea4eb9711cb4acfe7bd8ec4530366fc73a1e3d7146c0642fb8f76bd127cda78ff9df06c661b871553d0ed8d136aff2305b154b8b937e010c5edb311bb16e227b9dfbda5c21a2175e8c04c2750660f42a2b5f17059695ebaebdf0066a064cc90cc2b93d90a4c2e77b13fd2551e74046fa9e3dd90f2449ddbb21a5a66b86c5faea3c870abf8b690ba961f91a6d3344e7965de103e8a815a43e0214867d5ab2bfbbfbbcf241c00885cdcd1633b0af9e0d2084b6a9499c3d0a494f29da17b5a4db801da077f731ce7276974d4e7023d9fc596ff2bb0b573e2c88d5226ecfc0fea366069bf4e948512839be0938d6be9d52eb9fb639c5f1fd721ce1f4c79915fe password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  Generate a derived key by feeding password: pw salt: ? iterations: ?
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [load_json_string()]:  Loading JSON string for data: {"keyval": {"public": "f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033", "private": "879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957"}, "keyid": "94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290", "keytype": "ed25519"}
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Decrypted content of: ' /home/joan/Escriptori/TFM/TFM/demo/keys/mainroot ':  {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}}
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  key_root_pri: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}}
	-------->[demo/__init__.py]	>>Action Perfomed:  [import_public_key()]:  Importing public key keyname: maintimestamp
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  Importing ed25519 publickey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/maintimestamp.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  Loading JSON file for filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/maintimestamp.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  Constructing TUF key dictionary for key_metadata: {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'} hash_algorithm: sha512
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  key_timestamp_pub: {u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}, u'keytype': u'ed25519', u'keyid': '6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyid_hash_algorithms': [u'sha256', u'sha512']}
	-------->[demo/__init__.py]	>>Action Perfomed:  [import_private_key()]:  Importing private key keyname: maintimestamp
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Importing ed25519 privatekey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/maintimestamp password: pw
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]: Store the encrypted contents of '/home/joan/Escriptori/TFM/TFM/demo/keys/maintimestamp' prior to calling the decryption routine
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  Return a string containing encrypted_key: f4b7d6888e9eae79b4a9bf69400b22b9@@@@100000@@@@913ebfb85ae3683249dd7e8b6719d75d6b34e1e9f9720c39ecc1e7c3d9f58eae@@@@ac7acf8d588bbe84a0e3597aa3a91e2e@@@@d8a122717ffb34ffd41bb6b7b64392e56857a36adfcbe32a6ee51dcf808a130e3db5166a96402a23bf7f1c1e3bd87d7271a9568e15f6d9a9b47619f1c4be293dd70239836b56f8f35916a02b89fdf6fe0ae586a43b468a87b7af6228380689acf6b2ad5c3633e2b2d2463ea8b7e4f4c7ffb7912d50768c3de91aa0f24d12e93e7f2bcfc0160c0de8ec48e7131c1916cfed06691e02e46a4a13c17bf1adf4373464da150b8a84f4da7b701121b019d4a8a5b86382e677cca35e961ee2a970621367387ca8dea1187e92ed97715c51f25f1365da3595cb4b20951d60304d47087eee3fad262fe38cf5e31b8b2b65026ee6fd6399b771c6996349e2fd1d208d5651bf62252c74bf46083ad57647 in non-encrypted form, using passphrase: pw
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'general']
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  Decrypting encrypted_key: f4b7d6888e9eae79b4a9bf69400b22b9@@@@100000@@@@913ebfb85ae3683249dd7e8b6719d75d6b34e1e9f9720c39ecc1e7c3d9f58eae@@@@ac7acf8d588bbe84a0e3597aa3a91e2e@@@@d8a122717ffb34ffd41bb6b7b64392e56857a36adfcbe32a6ee51dcf808a130e3db5166a96402a23bf7f1c1e3bd87d7271a9568e15f6d9a9b47619f1c4be293dd70239836b56f8f35916a02b89fdf6fe0ae586a43b468a87b7af6228380689acf6b2ad5c3633e2b2d2463ea8b7e4f4c7ffb7912d50768c3de91aa0f24d12e93e7f2bcfc0160c0de8ec48e7131c1916cfed06691e02e46a4a13c17bf1adf4373464da150b8a84f4da7b701121b019d4a8a5b86382e677cca35e961ee2a970621367387ca8dea1187e92ed97715c51f25f1365da3595cb4b20951d60304d47087eee3fad262fe38cf5e31b8b2b65026ee6fd6399b771c6996349e2fd1d208d5651bf62252c74bf46083ad57647 password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  Decrypting file_contents: f4b7d6888e9eae79b4a9bf69400b22b9@@@@100000@@@@913ebfb85ae3683249dd7e8b6719d75d6b34e1e9f9720c39ecc1e7c3d9f58eae@@@@ac7acf8d588bbe84a0e3597aa3a91e2e@@@@d8a122717ffb34ffd41bb6b7b64392e56857a36adfcbe32a6ee51dcf808a130e3db5166a96402a23bf7f1c1e3bd87d7271a9568e15f6d9a9b47619f1c4be293dd70239836b56f8f35916a02b89fdf6fe0ae586a43b468a87b7af6228380689acf6b2ad5c3633e2b2d2463ea8b7e4f4c7ffb7912d50768c3de91aa0f24d12e93e7f2bcfc0160c0de8ec48e7131c1916cfed06691e02e46a4a13c17bf1adf4373464da150b8a84f4da7b701121b019d4a8a5b86382e677cca35e961ee2a970621367387ca8dea1187e92ed97715c51f25f1365da3595cb4b20951d60304d47087eee3fad262fe38cf5e31b8b2b65026ee6fd6399b771c6996349e2fd1d208d5651bf62252c74bf46083ad57647 password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  Generate a derived key by feeding password: pw salt: ? iterations: ?
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [load_json_string()]:  Loading JSON string for data: {"keyval": {"public": "97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654", "private": "ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e"}, "keyid": "6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a", "keytype": "ed25519"}
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Decrypted content of: ' /home/joan/Escriptori/TFM/TFM/demo/keys/maintimestamp ':  {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}}
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  key_timestamp_pri: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}}
	-------->[demo/__init__.py]	>>Action Perfomed:  [import_public_key()]:  Importing public key keyname: mainsnapshot
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  Importing ed25519 publickey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/mainsnapshot.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  Loading JSON file for filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/mainsnapshot.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  Constructing TUF key dictionary for key_metadata: {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'} hash_algorithm: sha512
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  key_snapshot_pub: {u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}, u'keytype': u'ed25519', u'keyid': 'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyid_hash_algorithms': [u'sha256', u'sha512']}
	-------->[demo/__init__.py]	>>Action Perfomed:  [import_private_key()]:  Importing private key keyname: mainsnapshot
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Importing ed25519 privatekey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/mainsnapshot password: pw
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]: Store the encrypted contents of '/home/joan/Escriptori/TFM/TFM/demo/keys/mainsnapshot' prior to calling the decryption routine
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  Return a string containing encrypted_key: 33a15998fc362bdf522b3c4ee8481a80@@@@100000@@@@175d54f89e44ed70721f538fcaa3129d2d52f454cfd390af15e7a85a10d3a12b@@@@4827c6d8545f36aa1f2f9ff3864dedba@@@@43af2d1f11b4f97dc859acc0b23a4885d62256aa2096af12727b3936a8ab647a7036b7d5eb35f870e9db8db2c7cf7930d4df11bb62ed870a3fe604175027bfa4084808bf5b2188294181977114c1d049075074ce3ba19f80c434846a319f2cbd5b49484af81ae0d953e38d57abc4720e1fb33bc8d83d33ed30791054bbea463730cce688b11d8d4f6945a11d75d5a614d549a3418e43d9b5a65405959c8b235bcecf2f383c5326f4e688860d46a0b878652c2ab05c2446af161e20928bc0bb2a597d7c17451d43216206b33f73d7d2a9c6de33fcbc49ddfad295f2ce193ce141cfefa1f5d79804ace174090a33da982164e08b8c39dbc4f78e6ab1408ad09c9473b1144fe203ea04af6d42f8 in non-encrypted form, using passphrase: pw
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'general']
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  Decrypting encrypted_key: 33a15998fc362bdf522b3c4ee8481a80@@@@100000@@@@175d54f89e44ed70721f538fcaa3129d2d52f454cfd390af15e7a85a10d3a12b@@@@4827c6d8545f36aa1f2f9ff3864dedba@@@@43af2d1f11b4f97dc859acc0b23a4885d62256aa2096af12727b3936a8ab647a7036b7d5eb35f870e9db8db2c7cf7930d4df11bb62ed870a3fe604175027bfa4084808bf5b2188294181977114c1d049075074ce3ba19f80c434846a319f2cbd5b49484af81ae0d953e38d57abc4720e1fb33bc8d83d33ed30791054bbea463730cce688b11d8d4f6945a11d75d5a614d549a3418e43d9b5a65405959c8b235bcecf2f383c5326f4e688860d46a0b878652c2ab05c2446af161e20928bc0bb2a597d7c17451d43216206b33f73d7d2a9c6de33fcbc49ddfad295f2ce193ce141cfefa1f5d79804ace174090a33da982164e08b8c39dbc4f78e6ab1408ad09c9473b1144fe203ea04af6d42f8 password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  Decrypting file_contents: 33a15998fc362bdf522b3c4ee8481a80@@@@100000@@@@175d54f89e44ed70721f538fcaa3129d2d52f454cfd390af15e7a85a10d3a12b@@@@4827c6d8545f36aa1f2f9ff3864dedba@@@@43af2d1f11b4f97dc859acc0b23a4885d62256aa2096af12727b3936a8ab647a7036b7d5eb35f870e9db8db2c7cf7930d4df11bb62ed870a3fe604175027bfa4084808bf5b2188294181977114c1d049075074ce3ba19f80c434846a319f2cbd5b49484af81ae0d953e38d57abc4720e1fb33bc8d83d33ed30791054bbea463730cce688b11d8d4f6945a11d75d5a614d549a3418e43d9b5a65405959c8b235bcecf2f383c5326f4e688860d46a0b878652c2ab05c2446af161e20928bc0bb2a597d7c17451d43216206b33f73d7d2a9c6de33fcbc49ddfad295f2ce193ce141cfefa1f5d79804ace174090a33da982164e08b8c39dbc4f78e6ab1408ad09c9473b1144fe203ea04af6d42f8 password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  Generate a derived key by feeding password: pw salt: ? iterations: ?
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [load_json_string()]:  Loading JSON string for data: {"keyval": {"public": "497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83", "private": "f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09"}, "keyid": "aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99", "keytype": "ed25519"}
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Decrypted content of: ' /home/joan/Escriptori/TFM/TFM/demo/keys/mainsnapshot ':  {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}}
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  key_snapshot_pri: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}}
	-------->[demo/__init__.py]	>>Action Perfomed:  [import_public_key()]:  Importing public key keyname: maintargets
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  Importing ed25519 publickey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/maintargets.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  Loading JSON file for filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/maintargets.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  Constructing TUF key dictionary for key_metadata: {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'} hash_algorithm: sha512
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  key_targets_pub: {u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}, u'keytype': u'ed25519', u'keyid': 'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyid_hash_algorithms': [u'sha256', u'sha512']}
	-------->[demo/__init__.py]	>>Action Perfomed:  [import_private_key()]:  Importing private key keyname: maintargets
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Importing ed25519 privatekey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/maintargets password: pw
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]: Store the encrypted contents of '/home/joan/Escriptori/TFM/TFM/demo/keys/maintargets' prior to calling the decryption routine
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  Return a string containing encrypted_key: 62d6f0c5a07a923158d2d580f0b91f0e@@@@100000@@@@8122d4686a071f15eae9b079971d7221b88c8d19e659d01dc6922c7afabc933f@@@@1e6e8faa2b58f9d340cc21784b86f632@@@@d2cd021295d84c65448807fc2101719d508c4c03c43e5c07d27b947897ba81b9357dab3d92d95d9c49bc576e1416e5db952b0e12876c5c98ba0ab5f5862fb0c13c73c329771871be70aa1a5ad152a36813678dee7a32b13f6dcf8e5e11e3b7eb01479887da5630cbc639574b8b2b410ae033730161327948a4f0dcbc7019b8d312b6fa300439096cf33b4fef48f4761e48cb5c7f044bf292f8321cf80cb9508ad644c3ec06f4ea77991f1dec62e911f3404b19881c32264ed66106eff5eb579fa6f982faf3cccfbb202105e240c7ff188dc88df36dce4f739fd90fada515b2a197f993b19390127d03e070fb938ab62be0b534c871b0367ac16ed1054b8c3108e9ab6686088fa702ad868029 in non-encrypted form, using passphrase: pw
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'general']
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  Decrypting encrypted_key: 62d6f0c5a07a923158d2d580f0b91f0e@@@@100000@@@@8122d4686a071f15eae9b079971d7221b88c8d19e659d01dc6922c7afabc933f@@@@1e6e8faa2b58f9d340cc21784b86f632@@@@d2cd021295d84c65448807fc2101719d508c4c03c43e5c07d27b947897ba81b9357dab3d92d95d9c49bc576e1416e5db952b0e12876c5c98ba0ab5f5862fb0c13c73c329771871be70aa1a5ad152a36813678dee7a32b13f6dcf8e5e11e3b7eb01479887da5630cbc639574b8b2b410ae033730161327948a4f0dcbc7019b8d312b6fa300439096cf33b4fef48f4761e48cb5c7f044bf292f8321cf80cb9508ad644c3ec06f4ea77991f1dec62e911f3404b19881c32264ed66106eff5eb579fa6f982faf3cccfbb202105e240c7ff188dc88df36dce4f739fd90fada515b2a197f993b19390127d03e070fb938ab62be0b534c871b0367ac16ed1054b8c3108e9ab6686088fa702ad868029 password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  Decrypting file_contents: 62d6f0c5a07a923158d2d580f0b91f0e@@@@100000@@@@8122d4686a071f15eae9b079971d7221b88c8d19e659d01dc6922c7afabc933f@@@@1e6e8faa2b58f9d340cc21784b86f632@@@@d2cd021295d84c65448807fc2101719d508c4c03c43e5c07d27b947897ba81b9357dab3d92d95d9c49bc576e1416e5db952b0e12876c5c98ba0ab5f5862fb0c13c73c329771871be70aa1a5ad152a36813678dee7a32b13f6dcf8e5e11e3b7eb01479887da5630cbc639574b8b2b410ae033730161327948a4f0dcbc7019b8d312b6fa300439096cf33b4fef48f4761e48cb5c7f044bf292f8321cf80cb9508ad644c3ec06f4ea77991f1dec62e911f3404b19881c32264ed66106eff5eb579fa6f982faf3cccfbb202105e240c7ff188dc88df36dce4f739fd90fada515b2a197f993b19390127d03e070fb938ab62be0b534c871b0367ac16ed1054b8c3108e9ab6686088fa702ad868029 password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  Generate a derived key by feeding password: pw salt: ? iterations: ?
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [load_json_string()]:  Loading JSON string for data: {"keyval": {"public": "729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e", "private": "1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f"}, "keyid": "c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596", "keytype": "ed25519"}
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Decrypted content of: ' /home/joan/Escriptori/TFM/TFM/demo/keys/maintargets ':  {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}}
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  key_targets_pri: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}}
	-------->[demo/__init__.py]	>>Action Perfomed:  [import_public_key()]:  Importing public key keyname: mainrole1
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  Importing ed25519 publickey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/mainrole1.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  Loading JSON file for filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/mainrole1.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  Constructing TUF key dictionary for key_metadata: {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca'}}
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca'} hash_algorithm: sha512
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  key_role1_pub: {u'keyval': {u'public': u'c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca'}, u'keytype': u'ed25519', u'keyid': '8650aed05799a74f5febc9070c5d3e58d62797662d48062614b1ce0a643ee368', u'keyid_hash_algorithms': [u'sha256', u'sha512']}
	-------->[demo/__init__.py]	>>Action Perfomed:  [import_private_key()]:  Importing private key keyname: mainrole1
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Importing ed25519 privatekey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/mainrole1 password: pw
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]: Store the encrypted contents of '/home/joan/Escriptori/TFM/TFM/demo/keys/mainrole1' prior to calling the decryption routine
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  Return a string containing encrypted_key: 49126c753cf606c8733008375f880d16@@@@100000@@@@78120f8a5e3b9c52a6e533c783fca1e1e750f2824ed48683800a846b10c70a71@@@@e5a92d0e0a9a768372c196d56bba467a@@@@8c476dd93e1af508f6a0450bc00e5fcbefe9a6c833b68447c4826920a0381dd3d4539c0719832e007c48594487c09c03095983366974e18bf61f4bef9846e704c5a7b375f4edfb203f5206a644cf2239cced013b9bbed13f1d4057e705b4bab4a316298eba312f985dd48d775ca2ac2eed55c9740ac903b06bafd51f773680d14b485f5c5d08d03f7656e1ef33990a40370158b55199a08a81c25522c6826472d2b5231e7244a76f921275a47a41d24831e3a916c835fbb69d5b475bbf2d4fd2283131a6a89ec3c3704025c3da3a82fcb088fc5654a4f9e3744c163ed8aa289882fa11f75fa6e991a667b381179794698aafb0e0e5b4e9ad571143ec82f560885ce4d13f9688be23df48648b in non-encrypted form, using passphrase: pw
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'general']
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  Decrypting encrypted_key: 49126c753cf606c8733008375f880d16@@@@100000@@@@78120f8a5e3b9c52a6e533c783fca1e1e750f2824ed48683800a846b10c70a71@@@@e5a92d0e0a9a768372c196d56bba467a@@@@8c476dd93e1af508f6a0450bc00e5fcbefe9a6c833b68447c4826920a0381dd3d4539c0719832e007c48594487c09c03095983366974e18bf61f4bef9846e704c5a7b375f4edfb203f5206a644cf2239cced013b9bbed13f1d4057e705b4bab4a316298eba312f985dd48d775ca2ac2eed55c9740ac903b06bafd51f773680d14b485f5c5d08d03f7656e1ef33990a40370158b55199a08a81c25522c6826472d2b5231e7244a76f921275a47a41d24831e3a916c835fbb69d5b475bbf2d4fd2283131a6a89ec3c3704025c3da3a82fcb088fc5654a4f9e3744c163ed8aa289882fa11f75fa6e991a667b381179794698aafb0e0e5b4e9ad571143ec82f560885ce4d13f9688be23df48648b password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  Decrypting file_contents: 49126c753cf606c8733008375f880d16@@@@100000@@@@78120f8a5e3b9c52a6e533c783fca1e1e750f2824ed48683800a846b10c70a71@@@@e5a92d0e0a9a768372c196d56bba467a@@@@8c476dd93e1af508f6a0450bc00e5fcbefe9a6c833b68447c4826920a0381dd3d4539c0719832e007c48594487c09c03095983366974e18bf61f4bef9846e704c5a7b375f4edfb203f5206a644cf2239cced013b9bbed13f1d4057e705b4bab4a316298eba312f985dd48d775ca2ac2eed55c9740ac903b06bafd51f773680d14b485f5c5d08d03f7656e1ef33990a40370158b55199a08a81c25522c6826472d2b5231e7244a76f921275a47a41d24831e3a916c835fbb69d5b475bbf2d4fd2283131a6a89ec3c3704025c3da3a82fcb088fc5654a4f9e3744c163ed8aa289882fa11f75fa6e991a667b381179794698aafb0e0e5b4e9ad571143ec82f560885ce4d13f9688be23df48648b password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  Generate a derived key by feeding password: pw salt: ? iterations: ?
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [load_json_string()]:  Loading JSON string for data: {"keyval": {"public": "c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca", "private": "134dc07435cd0d5a371d51ee938899c594c578dd0a3ab048aa70de5dd71f99f2"}, "keyid": "8650aed05799a74f5febc9070c5d3e58d62797662d48062614b1ce0a643ee368", "keytype": "ed25519"}
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Decrypted content of: ' /home/joan/Escriptori/TFM/TFM/demo/keys/mainrole1 ':  {u'keytype': u'ed25519', u'keyid': u'8650aed05799a74f5febc9070c5d3e58d62797662d48062614b1ce0a643ee368', u'keyval': {u'public': u'c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca', u'private': u'134dc07435cd0d5a371d51ee938899c594c578dd0a3ab048aa70de5dd71f99f2'}}
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  key_role1_pri: {u'keytype': u'ed25519', u'keyid': u'8650aed05799a74f5febc9070c5d3e58d62797662d48062614b1ce0a643ee368', u'keyval': {u'public': u'c5a78db3f3ba96462525664e502f2e7893b81e7e270d75ffb9a6bb95b56857ca', u'private': u'134dc07435cd0d5a371d51ee938899c594c578dd0a3ab048aa70de5dd71f99f2'}}

	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  Adding top level keys to the main repository
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  Adding verification key_root_pub
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: root Value for key:  {u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}, u'keytype': u'ed25519', u'keyid': '94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyid_hash_algorithms': [u'sha256', u'sha512']} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}, u'keytype': u'ed25519', u'keyid': '94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2021-02-13T02:10:34Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-13T02:10:26Z', u'version': 0, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  Adding verification key_timestamp_pub
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: timestamp Value for key:  {u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}, u'keytype': u'ed25519', u'keyid': '6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyid_hash_algorithms': [u'sha256', u'sha512']} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}, u'keytype': u'ed25519', u'keyid': '6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-14T20:22:14Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2020-02-14T20:22:06Z', u'version': 0, u'compressions': [u''], u'keyids': ['6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  Adding verification key_snapshot_pub
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: snapshot Value for key:  {u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}, u'keytype': u'ed25519', u'keyid': 'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyid_hash_algorithms': [u'sha256', u'sha512']} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}, u'keytype': u'ed25519', u'keyid': 'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-14T20:22:14Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2020-02-20T20:22:06Z', u'version': 0, u'compressions': [u''], u'keyids': ['aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  Adding verification key_targets_pub
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: targets Value for key:  {u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}, u'keytype': u'ed25519', u'keyid': 'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyid_hash_algorithms': [u'sha256', u'sha512']} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}, u'keytype': u'ed25519', u'keyid': 'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-14T20:22:14Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'keyids': ['c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'expires': u'2020-05-15T03:49:16Z', u'threshold': 1, u'version': 0, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [], u'compressions': [u'']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  Adding signing key_root_pri
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: root key: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-13T02:10:26Z', u'version': 0, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290'], u'threshold': 1, u'signing_keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  Adding signing key_timestamp_pri
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: timestamp key: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'keyids': ['6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a'], u'expires': u'2020-02-14T20:22:06Z', u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'threshold': 1, u'signing_keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  Adding signing key_snapshot_pri
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: snapshot key: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'keyids': ['aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99'], u'expires': u'2020-02-20T20:22:06Z', u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'threshold': 1, u'signing_keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]:  Adding signing key_targets_pri
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: targets key: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: default key_dict: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'expires': u'2020-05-15T03:49:16Z', u'version': 0, u'compressions': [u''], u'keyids': ['c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'threshold': 1, u'signing_keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'path_hash_prefixes': []} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [clean_slate()]: Adding some already created targets to imagerepo
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Add target to image repo. Target: demo/images/INFO1.0.txtfilepath_in_repo: INFO1.0.txt
ImageRepo: Copying target file into place.
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Copying: demo/images/INFO1.0.txt to: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/INFO1.0.txt
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  Adding target for rolename: targets filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/INFO1.0.txt custom: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {u'/INFO1.0.txt': {}}, u'signatures': [], u'keyids': ['c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'expires': u'2020-05-15T03:49:16Z', u'threshold': 1, u'version': 0, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'compressions': [u'']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Add target to image repo. Target: demo/images/TCU1.0.txtfilepath_in_repo: TCU1.0.txt
ImageRepo: Copying target file into place.
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Copying: demo/images/TCU1.0.txt to: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.0.txt
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  Adding target for rolename: targets filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.0.txt custom: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {u'/INFO1.0.txt': {}, u'/TCU1.0.txt': {}}, u'signatures': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'expires': u'2020-05-15T03:49:16Z', u'version': 0, u'compressions': [u''], u'keyids': ['c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'threshold': 1, u'signing_keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'path_hash_prefixes': []} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Add target to image repo. Target: demo/images/TCU1.1.txtfilepath_in_repo: TCU1.1.txt
ImageRepo: Copying target file into place.
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Copying: demo/images/TCU1.1.txt to: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.1.txt
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  Adding target for rolename: targets filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.1.txt custom: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {u'/INFO1.0.txt': {}, u'/TCU1.1.txt': {}, u'/TCU1.0.txt': {}}, u'signatures': [], u'keyids': ['c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'expires': u'2020-05-15T03:49:16Z', u'threshold': 1, u'version': 0, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'compressions': [u'']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Add target to image repo. Target: demo/images/TCU1.2.txtfilepath_in_repo: TCU1.2.txt
ImageRepo: Copying target file into place.
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Copying: demo/images/TCU1.2.txt to: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.2.txt
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  Adding target for rolename: targets filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.2.txt custom: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {u'/INFO1.0.txt': {}, u'/TCU1.1.txt': {}, u'/TCU1.0.txt': {}, u'/TCU1.2.txt': {}}, u'signatures': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'expires': u'2020-05-15T03:49:16Z', u'version': 0, u'compressions': [u''], u'keyids': ['c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'threshold': 1, u'signing_keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'path_hash_prefixes': []} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Add target to image repo. Target: demo/images/BCU1.0.txtfilepath_in_repo: BCU1.0.txt
ImageRepo: Copying target file into place.
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Copying: demo/images/BCU1.0.txt to: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.0.txt
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  Adding target for rolename: targets filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.0.txt custom: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {u'/INFO1.0.txt': {}, u'/TCU1.1.txt': {}, u'/BCU1.0.txt': {}, u'/TCU1.0.txt': {}, u'/TCU1.2.txt': {}}, u'signatures': [], u'keyids': ['c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'expires': u'2020-05-15T03:49:16Z', u'threshold': 1, u'version': 0, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'compressions': [u'']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Add target to image repo. Target: demo/images/BCU1.1.txtfilepath_in_repo: BCU1.1.txt
ImageRepo: Copying target file into place.
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Copying: demo/images/BCU1.1.txt to: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.1.txt
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  Adding target for rolename: targets filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.1.txt custom: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {u'/TCU1.1.txt': {}, u'/BCU1.1.txt': {}, u'/TCU1.0.txt': {}, u'/TCU1.2.txt': {}, u'/INFO1.0.txt': {}, u'/BCU1.0.txt': {}}, u'signatures': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'expires': u'2020-05-15T03:49:16Z', u'version': 0, u'compressions': [u''], u'keyids': ['c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'threshold': 1, u'signing_keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'path_hash_prefixes': []} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Add target to image repo. Target: demo/images/BCU1.2.txtfilepath_in_repo: BCU1.2.txt
ImageRepo: Copying target file into place.
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Copying: demo/images/BCU1.2.txt to: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.2.txt
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  Adding target for rolename: targets filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.2.txt custom: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {u'/TCU1.0.txt': {}, u'/TCU1.2.txt': {}, u'/BCU1.2.txt': {}, u'/BCU1.0.txt': {}, u'/TCU1.1.txt': {}, u'/BCU1.1.txt': {}, u'/INFO1.0.txt': {}}, u'signatures': [], u'keyids': ['c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'expires': u'2020-05-15T03:49:16Z', u'threshold': 1, u'version': 0, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'compressions': [u'']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.add_target()]:  returning 
ImageRepo: Signing and hosting initial repository metadata
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: timestamp and snapshot marked as dirty
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.mark_dirty()]:  Marking dirty roles:  [u'timestamp', u'snapshot']
	--------> [tuf/roledb.py]	>>Function:  [mark_dirty()]:  Mark_dirty roles: [u'timestamp', u'snapshot'] repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [mark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.mark_dirty()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Writting in repo instance...
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Write all the JSON Metadata objects to their corresponding files. write() raises an exception if any of the role metadata to be written to disk is invalid, such as an insufficient threshold of signatures, missing private keys, etc.
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  Getting dirty roles for repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  Getting dirty roles for repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  dirty_rolenames: [u'timestamp', u'root', u'snapshot', u'targets']
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: root
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: targets
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  END-FOR-LOOP



	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Root in dirty_rolenames
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: root metadata_filename: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/root.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_root_metadata()]:  Creating root metadata.  'tuf.roledb.py' and 'tuf.keydb.py' are read and the information returned by these modules is used to generate the root metadata object.
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_root_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Root metadata received: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/root.der metadata_object: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with keyids: [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290'] repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/root.der' with key: 94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with key_dict: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  signature: {u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'178bb5f144c87a6bbf2d55ac1a27831d535297f08c3b9416110a31010126fdbf6f34bad55ee329dca90e5e4112f88754f34490ba12bfe615c6f7e9705ec2650f', u'method': u'ed25519'} appended to METADATA in format SIGNABLE
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: root has rights for sign signable: {u'signatures': [{u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'178bb5f144c87a6bbf2d55ac1a27831d535297f08c3b9416110a31010126fdbf6f34bad55ee329dca90e5e4112f88754f34490ba12bfe615c6f7e9705ec2650f', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: default
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: root repository_name: default signable: {u'signatures': [{u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'178bb5f144c87a6bbf2d55ac1a27831d535297f08c3b9416110a31010126fdbf6f34bad55ee329dca90e5e4112f88754f34490ba12bfe615c6f7e9705ec2650f', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}} produced signature: {u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'178bb5f144c87a6bbf2d55ac1a27831d535297f08c3b9416110a31010126fdbf6f34bad55ee329dca90e5e4112f88754f34490ba12bfe615c6f7e9705ec2650f', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}} produced signature: {u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'178bb5f144c87a6bbf2d55ac1a27831d535297f08c3b9416110a31010126fdbf6f34bad55ee329dca90e5e4112f88754f34490ba12bfe615c6f7e9705ec2650f', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-13T02:10:26Z', u'version': 1, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290'], u'threshold': 1, u'signing_keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/root.der metadata_object: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with keyids: [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290'] repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/root.der' with key: 94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with key_dict: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  signature: {u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'} appended to METADATA in format SIGNABLE
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: root has rights for sign signable: {u'signatures': [{u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: default
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: root repository_name: default signable: {u'signatures': [{u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}} produced signature: {u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}} produced signature: {u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}} produced signature: {u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033', u'private': u'879d244c6720361cf1f038a84082b08ac9cd586c32c1c9c6153f6db61b474957'}} produced signature: {u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/root.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f47d0fd14d0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/root.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290', u'sig': u'10a2cd9bf3745a4769ced88621e818d0b458f2acb02d1a8905184418ba9ccfec207104ec7010110101bce744e9473a54e583038f9b7f300344a8ab2269bd0607', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']}, u'root': {u'threshold': 1, u'keyids': [u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290']}, u'targets': {u'threshold': 1, u'keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596']}, u'timestamp': {u'threshold': 1, u'keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']}}, 'keys': {u'94c836f0c45168f0a437eef0e487b910f58db4d462ae457b5730a4487130f290': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f4ac8d95cfdf65a4ccaee072ba5a48e8ad6a0c30be6ffd525aec6bc078211033'}}, u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654'}}, u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83'}}, u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e'}}}, 'expires': u'2021-02-13T02:10:26Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f47d0fd1d50>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Already generated and wrote metadata for Root



	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Targets in dirty_rolenames
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: targets metadata_filename: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/targets.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [generate_targets_metadata()]:  Generating targets metadata object. The targets in 'target_files' must exist at the same path they should on the repo. 'target_files' is a list of targets.  The 'custom' field of the targets metadata is not currently supported.
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/imagerepo/targets
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_fileinfo()]:  Returning metadata fileinfo for filename: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.0.txt custom None
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.0.txt hash_algorithms: [u'sha256', u'sha512']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_fileinfo()]:  Returning metadata fileinfo for filename: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.2.txt custom None
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.2.txt hash_algorithms: [u'sha256', u'sha512']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_fileinfo()]:  Returning metadata fileinfo for filename: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.2.txt custom None
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.2.txt hash_algorithms: [u'sha256', u'sha512']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_fileinfo()]:  Returning metadata fileinfo for filename: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.0.txt custom None
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.0.txt hash_algorithms: [u'sha256', u'sha512']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_fileinfo()]:  Returning metadata fileinfo for filename: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.1.txt custom None
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/TCU1.1.txt hash_algorithms: [u'sha256', u'sha512']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_fileinfo()]:  Returning metadata fileinfo for filename: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.1.txt custom None
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/BCU1.1.txt hash_algorithms: [u'sha256', u'sha512']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_fileinfo()]:  Returning metadata fileinfo for filename: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/INFO1.0.txt custom None
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/targets/INFO1.0.txt hash_algorithms: [u'sha256', u'sha512']
	--------> [tuf/repository_lib.py]	>>Function:  [generate_targets_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Targets metadata received: {'_type': u'Targets', 'version': 0, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/targets.der metadata_object: {'_type': u'Targets', 'version': 0, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}} with keyids: [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'] repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/targets.der' with key: c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Targets', 'version': 0, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}} with key_dict: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  signature: {u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'a0beef2bd87fcc1698701cd2a64e52f98a1610baf82b74536bed19fea0db4a8ce12be014247f04359ea502aa366b589fc34893a3bdfd3fa12a985390a1f93a00', u'method': u'ed25519'} appended to METADATA in format SIGNABLE
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: targets has rights for sign signable: {u'signatures': [{u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'a0beef2bd87fcc1698701cd2a64e52f98a1610baf82b74536bed19fea0db4a8ce12be014247f04359ea502aa366b589fc34893a3bdfd3fa12a985390a1f93a00', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: default
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: targets repository_name: default signable: {u'signatures': [{u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'a0beef2bd87fcc1698701cd2a64e52f98a1610baf82b74536bed19fea0db4a8ce12be014247f04359ea502aa366b589fc34893a3bdfd3fa12a985390a1f93a00', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}} produced signature: {u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'a0beef2bd87fcc1698701cd2a64e52f98a1610baf82b74536bed19fea0db4a8ce12be014247f04359ea502aa366b589fc34893a3bdfd3fa12a985390a1f93a00', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}} produced signature: {u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'a0beef2bd87fcc1698701cd2a64e52f98a1610baf82b74536bed19fea0db4a8ce12be014247f04359ea502aa366b589fc34893a3bdfd3fa12a985390a1f93a00', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {u'/TCU1.0.txt': {}, u'/TCU1.2.txt': {}, u'/BCU1.2.txt': {}, u'/BCU1.0.txt': {}, u'/TCU1.1.txt': {}, u'/BCU1.1.txt': {}, u'/INFO1.0.txt': {}}, u'signatures': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'expires': u'2020-05-15T03:49:16Z', u'version': 1, u'compressions': [u''], u'keyids': ['c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'threshold': 1, u'signing_keyids': [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'], u'path_hash_prefixes': []} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/targets.der metadata_object: {'_type': u'Targets', 'version': 1, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}} with keyids: [u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596'] repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/targets.der' with key: c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Targets', 'version': 1, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}} with key_dict: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  signature: {u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'3f44bb778c6f3d88d67b65bc216672a2e6979ffc44621f5802aa2144a2761ebadd06f52d8c903f5ea23987cb5a23f8371bc3beac765b0a3fc4e76f9f9d58980e', u'method': u'ed25519'} appended to METADATA in format SIGNABLE
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: targets has rights for sign signable: {u'signatures': [{u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'3f44bb778c6f3d88d67b65bc216672a2e6979ffc44621f5802aa2144a2761ebadd06f52d8c903f5ea23987cb5a23f8371bc3beac765b0a3fc4e76f9f9d58980e', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: default
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: targets repository_name: default signable: {u'signatures': [{u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'3f44bb778c6f3d88d67b65bc216672a2e6979ffc44621f5802aa2144a2761ebadd06f52d8c903f5ea23987cb5a23f8371bc3beac765b0a3fc4e76f9f9d58980e', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}} produced signature: {u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'3f44bb778c6f3d88d67b65bc216672a2e6979ffc44621f5802aa2144a2761ebadd06f52d8c903f5ea23987cb5a23f8371bc3beac765b0a3fc4e76f9f9d58980e', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}} produced signature: {u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'3f44bb778c6f3d88d67b65bc216672a2e6979ffc44621f5802aa2144a2761ebadd06f52d8c903f5ea23987cb5a23f8371bc3beac765b0a3fc4e76f9f9d58980e', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'3f44bb778c6f3d88d67b65bc216672a2e6979ffc44621f5802aa2144a2761ebadd06f52d8c903f5ea23987cb5a23f8371bc3beac765b0a3fc4e76f9f9d58980e', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}} produced signature: {u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'3f44bb778c6f3d88d67b65bc216672a2e6979ffc44621f5802aa2144a2761ebadd06f52d8c903f5ea23987cb5a23f8371bc3beac765b0a3fc4e76f9f9d58980e', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'keyval': {u'public': u'729d9cb5f74688ef8e9a22fae1516f33ff98c7910b64bf3b66e6cfc51559840e', u'private': u'1c7b6e113c64bdd3e5123f6bbd8572c3ea23e8d5dffa9868cf380958f3aa642f'}} produced signature: {u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'3f44bb778c6f3d88d67b65bc216672a2e6979ffc44621f5802aa2144a2761ebadd06f52d8c903f5ea23987cb5a23f8371bc3beac765b0a3fc4e76f9f9d58980e', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/targets.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'3f44bb778c6f3d88d67b65bc216672a2e6979ffc44621f5802aa2144a2761ebadd06f52d8c903f5ea23987cb5a23f8371bc3beac765b0a3fc4e76f9f9d58980e', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'c24b457b2ca4b3c2f415efdbbebb914a0d05c5345b9889bda044362589d6f596', u'sig': u'3f44bb778c6f3d88d67b65bc216672a2e6979ffc44621f5802aa2144a2761ebadd06f52d8c903f5ea23987cb5a23f8371bc3beac765b0a3fc4e76f9f9d58980e', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {u'/TCU1.0.txt': {u'length': 16, u'hashes': {u'sha256': 'c0f997636d40ef418697e85add2e3e6f994592de0c4d90ffe0f86e177281b0dc', u'sha512': '87e3d4f40b43f457e507c81e0caa306893ecf4eb65c28a8ef4a5e5e66323c460c500a7cb9489221eb8bcd2eb5b7e848dcf8c631518289fa07e629c4ffcf8e686'}}, u'/TCU1.2.txt': {u'length': 17, u'hashes': {u'sha256': 'fbc8fa01df33f30833428be0fb20edfaafa444ed23d020e3cbc9c60cff167288', u'sha512': 'c7c3924d33804eca1d691c5fe61bb965646bf9b6225ce1f040dcde81ce0fc26f4be323f4995e0dee35a847fdbb6efe5a8c8e248e07d1728af0b4cc6fb3179d38'}}, u'/BCU1.2.txt': {u'length': 18, u'hashes': {u'sha256': '42914dc1509923fc83b6945cbaaec193a22077ae3bb799e84b900570715fcb5a', u'sha512': 'f213f63b79b05e3ea2045ffe198ab75a993ca5b2709a2e1eac5f18a1a6be1b5eb6af9964b78d388b404414e296b046228f9b68eb75db684eed75b509518a77a5'}}, u'/BCU1.0.txt': {u'length': 15, u'hashes': {u'sha256': 'fb0aa5699a4e7b68009fed6b094ecb00c3ad5670921be1b902b72a23cd4675b1', u'sha512': '0b0bb00bccf7bdad519d0a0af2794c945bd51ebdbc79f9616f0e3903b32f4ce2d5b250ab1bc2d34194bacf720b4f0aed361ef8d59ac72b1bc19e3a223a5e87cd'}}, u'/INFO1.0.txt': {u'length': 18, u'hashes': {u'sha256': 'e116d4ef5a2f2dbba9a61970a25cab3e6695418e3dbfa71071e4d07aebb1f083', u'sha512': '7cfa230b2ad2290d38d0da9f0320c1de0dcc9acc40a74154d8f6461c9acb63e7a41a34034b6d84fed6220e1a42afbaa0846efcfc85e1d83c5174f1f8d88d2694'}}, u'/BCU1.1.txt': {u'length': 18, u'hashes': {u'sha256': '1eb6fa5c6bb606c5326d6ef0ff05f5fcefde4e50c7daea530978090778b38bf4', u'sha512': '9727058c2ba828fdd2fc5ae02f52c10e47404283f92df3539989e2ada3cf7e85a9772faed1bd0bad3fc2bd8f6e5d15b976b8e832dd46874be72b994bc57a62a0'}}, u'/TCU1.1.txt': {u'length': 17, u'hashes': {u'sha256': '56d7cd56a85e34e40d005e1f79c0e95d6937d5528ac0b301dbe68d57e03a5c21', u'sha512': '94d7419b8606103f363aa17feb875575a978df8e88038ea284ff88d90e534eaa7218040384b19992cc7866f5eca803e1654c9ccdf3b250d6198b3c4731216db4'}}}, 'expires': u'2020-05-15T03:49:16Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/targets.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f47d0fd1590>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Already generated and wrote metadata for Targets



	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Snapshot in dirty_rolenames
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: snapshot metadata_filename: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/snapshot.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_snapshot_metadata()]:  Generating snapshot metadata. The minimum metadata must exist (i.e., 'root.json' and 'targets.json'). This function searches 'metadata_directory' and the resulting snapshot file will list all the delegated roles found there.
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: timestamp.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: snapshot.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: targets.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: root.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: snapshot.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: timestamp.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: targets.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: root.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [generate_snapshot_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Snapshot metadata received: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/snapshot.der metadata_object: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'} with keyids: [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99'] repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/snapshot.der' with key: aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  signature: {u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'a0067e983bf99351a7ece5f16a2c6f71d31c8898dc9f037e46f89f46c503b04747b91d62dc5dc4b08e3751b4e6b4f9e0b1f067abb48d0dcef8c7e00f5e07650e', u'method': u'ed25519'} appended to METADATA in format SIGNABLE
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: snapshot has rights for sign signable: {u'signatures': [{u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'a0067e983bf99351a7ece5f16a2c6f71d31c8898dc9f037e46f89f46c503b04747b91d62dc5dc4b08e3751b4e6b4f9e0b1f067abb48d0dcef8c7e00f5e07650e', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}} repository_name: default
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: snapshot repository_name: default signable: {u'signatures': [{u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'a0067e983bf99351a7ece5f16a2c6f71d31c8898dc9f037e46f89f46c503b04747b91d62dc5dc4b08e3751b4e6b4f9e0b1f067abb48d0dcef8c7e00f5e07650e', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}} produced signature: {u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'a0067e983bf99351a7ece5f16a2c6f71d31c8898dc9f037e46f89f46c503b04747b91d62dc5dc4b08e3751b4e6b4f9e0b1f067abb48d0dcef8c7e00f5e07650e', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}} produced signature: {u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'a0067e983bf99351a7ece5f16a2c6f71d31c8898dc9f037e46f89f46c503b04747b91d62dc5dc4b08e3751b4e6b4f9e0b1f067abb48d0dcef8c7e00f5e07650e', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'keyids': ['aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99'], u'expires': u'2020-02-20T20:22:06Z', u'threshold': 1, u'version': 1, u'compressions': [u''], u'partial_loaded': False, u'signing_keyids': [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/snapshot.der metadata_object: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'} with keyids: [u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99'] repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/snapshot.der' with key: aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  signature: {u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'15074eb0c11904a3d3ba776c955503a6367a111620b3882004f137e989adda40e817d2bd2ea33d36b1e5dc43398772d71e718c1e90272250b36d730a51540b00', u'method': u'ed25519'} appended to METADATA in format SIGNABLE
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: snapshot has rights for sign signable: {u'signatures': [{u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'15074eb0c11904a3d3ba776c955503a6367a111620b3882004f137e989adda40e817d2bd2ea33d36b1e5dc43398772d71e718c1e90272250b36d730a51540b00', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}} repository_name: default
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: snapshot repository_name: default signable: {u'signatures': [{u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'15074eb0c11904a3d3ba776c955503a6367a111620b3882004f137e989adda40e817d2bd2ea33d36b1e5dc43398772d71e718c1e90272250b36d730a51540b00', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}} produced signature: {u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'15074eb0c11904a3d3ba776c955503a6367a111620b3882004f137e989adda40e817d2bd2ea33d36b1e5dc43398772d71e718c1e90272250b36d730a51540b00', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}} produced signature: {u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'15074eb0c11904a3d3ba776c955503a6367a111620b3882004f137e989adda40e817d2bd2ea33d36b1e5dc43398772d71e718c1e90272250b36d730a51540b00', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'15074eb0c11904a3d3ba776c955503a6367a111620b3882004f137e989adda40e817d2bd2ea33d36b1e5dc43398772d71e718c1e90272250b36d730a51540b00', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}} repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99 repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}} produced signature: {u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'15074eb0c11904a3d3ba776c955503a6367a111620b3882004f137e989adda40e817d2bd2ea33d36b1e5dc43398772d71e718c1e90272250b36d730a51540b00', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'keyval': {u'public': u'497f62d80e5b892718da8788bb549bcf8369a1460ec23d6d67d0ca099a8e8f83', u'private': u'f559b6e50414c6e42f4474675deb2ed0a43f1028354ef4541f4f3af15e4ebe09'}} produced signature: {u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'15074eb0c11904a3d3ba776c955503a6367a111620b3882004f137e989adda40e817d2bd2ea33d36b1e5dc43398772d71e718c1e90272250b36d730a51540b00', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/snapshot.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'15074eb0c11904a3d3ba776c955503a6367a111620b3882004f137e989adda40e817d2bd2ea33d36b1e5dc43398772d71e718c1e90272250b36d730a51540b00', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'aaf05f8d054f8068bf6cb46beed7c824e2560802df462fc8681677586582ca99', u'sig': u'15074eb0c11904a3d3ba776c955503a6367a111620b3882004f137e989adda40e817d2bd2ea33d36b1e5dc43398772d71e718c1e90272250b36d730a51540b00', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/snapshot.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f47d0fd1950>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Already generated and wrote metadata for Snapshot



	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Timestamp in dirty_rolenames
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: timestamp metadata_filename: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/timestamp.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  Generating timestamp metadata object. The 'snapshot.json' file must exist.
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/snapshot.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  Returning Timestamp Metadata schema with corresponding format
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Timestamp metadata received: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
u'timestamp.der' expires Fri Feb 14 20:22:06 2020 (UTC).
0.9999074074074074 day(s) until it expires.
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/timestamp.der metadata_object: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'} with keyids: [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a'] repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/timestamp.der' with key: 6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  signature: {u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'7a6add84284ff61968fb3524874ddbcfda50af84e590864255b60102bfc02bd1d4e7d7f859482b10f28ef3b19a9dea6a199ec007c4a85bd7f1ed69bbefebba06', u'method': u'ed25519'} appended to METADATA in format SIGNABLE
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: timestamp has rights for sign signable: {u'signatures': [{u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'7a6add84284ff61968fb3524874ddbcfda50af84e590864255b60102bfc02bd1d4e7d7f859482b10f28ef3b19a9dea6a199ec007c4a85bd7f1ed69bbefebba06', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}} repository_name: default
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: timestamp repository_name: default signable: {u'signatures': [{u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'7a6add84284ff61968fb3524874ddbcfda50af84e590864255b60102bfc02bd1d4e7d7f859482b10f28ef3b19a9dea6a199ec007c4a85bd7f1ed69bbefebba06', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}} produced signature: {u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'7a6add84284ff61968fb3524874ddbcfda50af84e590864255b60102bfc02bd1d4e7d7f859482b10f28ef3b19a9dea6a199ec007c4a85bd7f1ed69bbefebba06', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}} produced signature: {u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'7a6add84284ff61968fb3524874ddbcfda50af84e590864255b60102bfc02bd1d4e7d7f859482b10f28ef3b19a9dea6a199ec007c4a85bd7f1ed69bbefebba06', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'keyids': ['6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a'], u'expires': u'2020-02-14T20:22:06Z', u'threshold': 1, u'version': 1, u'compressions': [u''], u'partial_loaded': False, u'signing_keyids': [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a']} Mark role as dirty: True repository name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/timestamp.der metadata_object: {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'} with keyids: [u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a'] repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/timestamp.der' with key: 6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  signature: {u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'} appended to METADATA in format SIGNABLE
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: timestamp has rights for sign signable: {u'signatures': [{u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}} repository_name: default
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: timestamp repository_name: default signable: {u'signatures': [{u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}} produced signature: {u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}} produced signature: {u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}} repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a repository_name: default
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}} produced signature: {u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'keyval': {u'public': u'97c1112bbd9047b1fdb50dd638bfed6d0639e0dff2c1443f5593fea40e30f654', u'private': u'ef373ea36a633a0044bbca19a298a4100e7f353461d7fe546e0ec299ac1b659e'}} produced signature: {u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/timestamp.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/timestamp.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f47d0fd1e10>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/timestamp.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'6fcd9a928358ad8ca7e946325f57ec71d50cb5977a8d02c5ab0de6765fef040a', u'sig': u'3c76598e04d88103d5c334312894446cc64e1bb79ee297d5557a4d712592b528223b34989d451a035ee9f5fdd31f0c2df3c2c235072886e6ce0382aa21373203', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '590baf8079ad34da535d75b6685b7aed18ed7b52bce394a59f749a5acdc7f076'}}}, 'expires': u'2020-02-14T20:22:06Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged/timestamp.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f47d0fd1dd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Already generated and wrote metadata for Timestamp



	--------> [tuf/repository_tool.py]	>>Function:  [Repository.unmark_dirty()]:  Unmarking dirty roles: [u'timestamp', u'root', u'snapshot', u'targets']
	--------> [tuf/roledb.py]	>>Function:  [unmark_dirty()]:  unmarking dirty roles: [u'timestamp', u'root', u'snapshot', u'targets'] repository_name: default
	--------> [tuf/roledb.py]	>>Function:  [unmark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.unmark_dirty()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_delete_obsolete_metadata()]:  Deleting obsolete metadata for metadata_directory: /home/joan/Escriptori/TFM/TFM/imagerepo/metadata.staged snapshot_metadata: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '0e1e5c2d3c49a279db4883b9dda408a8d8405cc847028d7c947d1d0e18ca7fa0'}}}, 'expires': u'2020-02-20T20:22:06Z'} consistent_snapshot: False repository_name: default
	--------> [tuf/repository_lib.py]	>>Function:  [_delete_obsolete_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  returning 
	[demo/demo_image_repo.py]	>>Function:  [write_to_live()]: Moving staged metadata to live metadata directory in: /home/joan/Escriptori/TFM/TFM/imagerepo
	[demo/demo_image_repo.py]	>>Function:  [host()]: Attempting to start server process...
	[demo/demo_image_repo.py]	>>Function:  [host()]: Preparing to host the main repo contents
	[demo/demo_image_repo.py]	>>Function:  [host()]:  Beginning hosting the server process <subprocess.Popen object at 0x7f47d0fd19d0>
ImageRepo: Main Repo server process started, with pid 3160; Main Repo serving on port: 30301; Main repo URL is 0.0.0.0:30301/
ImageRepo: Starting Image Repo Services Thread: will now listen on port 30309
>>> Serving HTTP on 0.0.0.0 port 30301 ...

