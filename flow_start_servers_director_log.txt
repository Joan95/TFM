[demo/demo_director.py]	>>Function:  [clean_slate()]: Adding: /home/joan/Escriptori/TFM/TFM/directorto os.path
Director: Loading all keys
	[demo/demo_director.py]	>>Function:  [clean_slate()]: Create keys and/or load keys into memory.
		[use_new_keys] = False
	-------->[demo/__init__.py]
			>>Action Perfomed:  Calling rt.import_ed25519_publickey_from_file

	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  Importing ed25519 publickey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/directorroot.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  Loading JSON file for filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/directorroot.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  Constructing TUF key dictionary for key_metadata: {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'} hash_algorithm: sha512
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: imported [key_dirroot_pub]
				 keyval
					 public f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79


				 keytype ed25519
				 keyid fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2
				 keyid_hash_algorithms [u'sha256', u'sha512']


	-------->[demo/__init__.py]
			>>Action Perfomed:  Calling rt.import_ed25519_privatekey_from_file

	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Importing ed25519 privatekey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/directorroot password: pw
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]: Store the encrypted contents of '/home/joan/Escriptori/TFM/TFM/demo/keys/directorroot' prior to calling the decryption routine
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  Return a string containing encrypted_key: faa431f56ab70096016384d60e789ae6@@@@100000@@@@6b6dbf7be483b860309e617516d6b591651720f3ac95bf2ababb0792825876a0@@@@b6aaab78776ae1f55a3771e814ff50ce@@@@5106a3c58d9749aba7c9ef92514809fb92d139e3b5b6b9109354e7c72c15690e267dc7c0b09ee05ecd78750bec1050e290da42a6da516b0fa26bd01bd5f5d5cda5f2534b64e52af4ccff5f164a0cd98532873622fb603549cabaefc76008bdfd72e3886dd11e9ed3f212e82ca86b08901228b01495911d0a3969260e1eec7c5a3e0777190207ce58658e731960c341e98d5bc0cc0de1e7629afb8a7053e729ff7496c561b72e5be3be4183c146ea6a80287730ea7981c2d332082b10eb9ee555c3f39bd482049e64da59d0cf872ac204dfc080192a3cb645ce0d71fb82a70523681744ddba4b9e02dbd1951ab57e1b5c272271c7a28d67a1d0558813996d4de8829309beb00c1b2eec251c21 in non-encrypted form, using passphrase: pw
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'general']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  Decrypting encrypted_key: faa431f56ab70096016384d60e789ae6@@@@100000@@@@6b6dbf7be483b860309e617516d6b591651720f3ac95bf2ababb0792825876a0@@@@b6aaab78776ae1f55a3771e814ff50ce@@@@5106a3c58d9749aba7c9ef92514809fb92d139e3b5b6b9109354e7c72c15690e267dc7c0b09ee05ecd78750bec1050e290da42a6da516b0fa26bd01bd5f5d5cda5f2534b64e52af4ccff5f164a0cd98532873622fb603549cabaefc76008bdfd72e3886dd11e9ed3f212e82ca86b08901228b01495911d0a3969260e1eec7c5a3e0777190207ce58658e731960c341e98d5bc0cc0de1e7629afb8a7053e729ff7496c561b72e5be3be4183c146ea6a80287730ea7981c2d332082b10eb9ee555c3f39bd482049e64da59d0cf872ac204dfc080192a3cb645ce0d71fb82a70523681744ddba4b9e02dbd1951ab57e1b5c272271c7a28d67a1d0558813996d4de8829309beb00c1b2eec251c21 password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  Decrypting file_contents: faa431f56ab70096016384d60e789ae6@@@@100000@@@@6b6dbf7be483b860309e617516d6b591651720f3ac95bf2ababb0792825876a0@@@@b6aaab78776ae1f55a3771e814ff50ce@@@@5106a3c58d9749aba7c9ef92514809fb92d139e3b5b6b9109354e7c72c15690e267dc7c0b09ee05ecd78750bec1050e290da42a6da516b0fa26bd01bd5f5d5cda5f2534b64e52af4ccff5f164a0cd98532873622fb603549cabaefc76008bdfd72e3886dd11e9ed3f212e82ca86b08901228b01495911d0a3969260e1eec7c5a3e0777190207ce58658e731960c341e98d5bc0cc0de1e7629afb8a7053e729ff7496c561b72e5be3be4183c146ea6a80287730ea7981c2d332082b10eb9ee555c3f39bd482049e64da59d0cf872ac204dfc080192a3cb645ce0d71fb82a70523681744ddba4b9e02dbd1951ab57e1b5c272271c7a28d67a1d0558813996d4de8829309beb00c1b2eec251c21 password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  Generate a derived key by feeding password: pw salt: ? iterations: ?
Serving HTTP on 0.0.0.0 port 30301 ...
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [load_json_string()]:  Loading JSON string for data: {"keyval": {"private": "0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68", "public": "f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79"}, "keytype": "ed25519", "keyid": "fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2"}
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Decrypted content of: ' /home/joan/Escriptori/TFM/TFM/demo/keys/directorroot ':  {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: imported [key_dirroot_pri]
				 keytype ed25519
				 keyid fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2
				 keyval
					 public f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79
					 private 0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68




	-------->[demo/__init__.py]
			>>Action Perfomed:  Calling rt.import_ed25519_publickey_from_file

	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  Importing ed25519 publickey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/directortimestamp.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  Loading JSON file for filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/directortimestamp.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  Constructing TUF key dictionary for key_metadata: {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'} hash_algorithm: sha512
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: imported [key_dirtime_pub]
				 keyval
					 public d1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c


				 keytype ed25519
				 keyid da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc
				 keyid_hash_algorithms [u'sha256', u'sha512']


	-------->[demo/__init__.py]
			>>Action Perfomed:  Calling rt.import_ed25519_privatekey_from_file

	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Importing ed25519 privatekey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/directortimestamp password: pw
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]: Store the encrypted contents of '/home/joan/Escriptori/TFM/TFM/demo/keys/directortimestamp' prior to calling the decryption routine
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  Return a string containing encrypted_key: 272213a00b4405fdc107f2c4f90d5fd3@@@@100000@@@@ffcd4d9098d1629d96aad954aee7f1055e9370e0b3ae64bd8d54ef88cb8026d4@@@@ec6298e00176355ba70c625f30f2a753@@@@6a714d2be433f702206023ef2ad98d20001b668f2d1161f9ed1b126919b3e31b7b43214a4722ae3930a0eb81d85bef9265cf94373686213dcae252e8061676564af3b0974014d14da1e6ee08fe28ab5080ac06a224d1d6469f06108b1aaaf280a3b29266c9c465d75e8b5be5a60c7e5a1db4730d05d9a05786aa98b98a22ff564a7aba7d7142d3507a14c83d7bedcd033bc7ac230102fdb3be4c48e0b628270fd6cce6c8f27bc69b5992c5f30f80253f19011c0450b4ab0414ef1493accaf277bf6774bae044fe7f037f8144e49bf20f3c70b059ffff6925eb3bd229d6f44bc97d312bb0864f5f82b97ada317470c058da288f105126ec5b4174c198d625545a124382c34b23b47fdff49bbb in non-encrypted form, using passphrase: pw
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'general']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  Decrypting encrypted_key: 272213a00b4405fdc107f2c4f90d5fd3@@@@100000@@@@ffcd4d9098d1629d96aad954aee7f1055e9370e0b3ae64bd8d54ef88cb8026d4@@@@ec6298e00176355ba70c625f30f2a753@@@@6a714d2be433f702206023ef2ad98d20001b668f2d1161f9ed1b126919b3e31b7b43214a4722ae3930a0eb81d85bef9265cf94373686213dcae252e8061676564af3b0974014d14da1e6ee08fe28ab5080ac06a224d1d6469f06108b1aaaf280a3b29266c9c465d75e8b5be5a60c7e5a1db4730d05d9a05786aa98b98a22ff564a7aba7d7142d3507a14c83d7bedcd033bc7ac230102fdb3be4c48e0b628270fd6cce6c8f27bc69b5992c5f30f80253f19011c0450b4ab0414ef1493accaf277bf6774bae044fe7f037f8144e49bf20f3c70b059ffff6925eb3bd229d6f44bc97d312bb0864f5f82b97ada317470c058da288f105126ec5b4174c198d625545a124382c34b23b47fdff49bbb password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  Decrypting file_contents: 272213a00b4405fdc107f2c4f90d5fd3@@@@100000@@@@ffcd4d9098d1629d96aad954aee7f1055e9370e0b3ae64bd8d54ef88cb8026d4@@@@ec6298e00176355ba70c625f30f2a753@@@@6a714d2be433f702206023ef2ad98d20001b668f2d1161f9ed1b126919b3e31b7b43214a4722ae3930a0eb81d85bef9265cf94373686213dcae252e8061676564af3b0974014d14da1e6ee08fe28ab5080ac06a224d1d6469f06108b1aaaf280a3b29266c9c465d75e8b5be5a60c7e5a1db4730d05d9a05786aa98b98a22ff564a7aba7d7142d3507a14c83d7bedcd033bc7ac230102fdb3be4c48e0b628270fd6cce6c8f27bc69b5992c5f30f80253f19011c0450b4ab0414ef1493accaf277bf6774bae044fe7f037f8144e49bf20f3c70b059ffff6925eb3bd229d6f44bc97d312bb0864f5f82b97ada317470c058da288f105126ec5b4174c198d625545a124382c34b23b47fdff49bbb password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  Generate a derived key by feeding password: pw salt: ? iterations: ?
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [load_json_string()]:  Loading JSON string for data: {"keyval": {"private": "eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce", "public": "d1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c"}, "keytype": "ed25519", "keyid": "da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc"}
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Decrypted content of: ' /home/joan/Escriptori/TFM/TFM/demo/keys/directortimestamp ':  {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: imported [key_dirtime_pri]
				 keytype ed25519
				 keyid da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc
				 keyval
					 public d1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c
					 private eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce




	-------->[demo/__init__.py]
			>>Action Perfomed:  Calling rt.import_ed25519_publickey_from_file

	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  Importing ed25519 publickey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/directorsnapshot.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  Loading JSON file for filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/directorsnapshot.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  Constructing TUF key dictionary for key_metadata: {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'} hash_algorithm: sha512
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: imported [key_dirsnap_pub]
				 keyval
					 public 228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2


				 keytype ed25519
				 keyid f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97
				 keyid_hash_algorithms [u'sha256', u'sha512']


	-------->[demo/__init__.py]
			>>Action Perfomed:  Calling rt.import_ed25519_privatekey_from_file

	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Importing ed25519 privatekey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/directorsnapshot password: pw
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]: Store the encrypted contents of '/home/joan/Escriptori/TFM/TFM/demo/keys/directorsnapshot' prior to calling the decryption routine
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  Return a string containing encrypted_key: 42293bb65c6be5de125828dbdffadf87@@@@100000@@@@ed7f9920c8e8ffb47cc5e5b2869d627fd080294964c16daf9c6c380b56a703ed@@@@dad720e7355909dbd9be853ef797f04b@@@@084030ca8c7812911ef64b11fcf748630e66ff8e02cf361f8b9f34d9b1a5056e8f3ce712a1434cadbae84ee8ada0ed3638181cc8e4f139d3b5caa3708a1a25acfb37a31eb709ca1ef40592de524efcbb11db37b9d57283126c769c0f776f16e4d8ed79e9c0e95bc688993dc697ac2c4ff7e029d579c41909414e0c95a54aba466e6781c67ef672eebcc669faa807c832999b4f9e26f133d76e97701020279127abc3032c707b13ff418f28be403fddd158577017052ed50a62fa417519e61d17e783e18886b74b74dd2b9aae9571fa9b7bd55de3aeb13479672f663a9447cc09b386f911cf3f91ab5c49af132f0c99170e6ce4b91671f98061fd5b05e8fca4ecacc0a48bcd09a376eef3a018 in non-encrypted form, using passphrase: pw
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'general']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  Decrypting encrypted_key: 42293bb65c6be5de125828dbdffadf87@@@@100000@@@@ed7f9920c8e8ffb47cc5e5b2869d627fd080294964c16daf9c6c380b56a703ed@@@@dad720e7355909dbd9be853ef797f04b@@@@084030ca8c7812911ef64b11fcf748630e66ff8e02cf361f8b9f34d9b1a5056e8f3ce712a1434cadbae84ee8ada0ed3638181cc8e4f139d3b5caa3708a1a25acfb37a31eb709ca1ef40592de524efcbb11db37b9d57283126c769c0f776f16e4d8ed79e9c0e95bc688993dc697ac2c4ff7e029d579c41909414e0c95a54aba466e6781c67ef672eebcc669faa807c832999b4f9e26f133d76e97701020279127abc3032c707b13ff418f28be403fddd158577017052ed50a62fa417519e61d17e783e18886b74b74dd2b9aae9571fa9b7bd55de3aeb13479672f663a9447cc09b386f911cf3f91ab5c49af132f0c99170e6ce4b91671f98061fd5b05e8fca4ecacc0a48bcd09a376eef3a018 password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  Decrypting file_contents: 42293bb65c6be5de125828dbdffadf87@@@@100000@@@@ed7f9920c8e8ffb47cc5e5b2869d627fd080294964c16daf9c6c380b56a703ed@@@@dad720e7355909dbd9be853ef797f04b@@@@084030ca8c7812911ef64b11fcf748630e66ff8e02cf361f8b9f34d9b1a5056e8f3ce712a1434cadbae84ee8ada0ed3638181cc8e4f139d3b5caa3708a1a25acfb37a31eb709ca1ef40592de524efcbb11db37b9d57283126c769c0f776f16e4d8ed79e9c0e95bc688993dc697ac2c4ff7e029d579c41909414e0c95a54aba466e6781c67ef672eebcc669faa807c832999b4f9e26f133d76e97701020279127abc3032c707b13ff418f28be403fddd158577017052ed50a62fa417519e61d17e783e18886b74b74dd2b9aae9571fa9b7bd55de3aeb13479672f663a9447cc09b386f911cf3f91ab5c49af132f0c99170e6ce4b91671f98061fd5b05e8fca4ecacc0a48bcd09a376eef3a018 password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  Generate a derived key by feeding password: pw salt: ? iterations: ?
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [load_json_string()]:  Loading JSON string for data: {"keyval": {"private": "452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1", "public": "228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2"}, "keytype": "ed25519", "keyid": "f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97"}
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Decrypted content of: ' /home/joan/Escriptori/TFM/TFM/demo/keys/directorsnapshot ':  {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: imported [key_dirsnap_pri]
				 keytype ed25519
				 keyid f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97
				 keyval
					 public 228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2
					 private 452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1




	-------->[demo/__init__.py]
			>>Action Perfomed:  Calling rt.import_ed25519_publickey_from_file

	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  Importing ed25519 publickey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/director.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  Loading JSON file for filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/director.pub
	-------- --------> [tuf/util.py]	>>Function:  [load_json_file()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  Constructing TUF key dictionary for key_metadata: {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'} hash_algorithm: sha256
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  Getting keyid for keytype: ed25519 key_value: {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'} hash_algorithm: sha512
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [_get_keyid()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_metadata_to_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_publickey_from_file()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: imported [key_dirtarg_pub]
				 keyval
					 public 99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9


				 keytype ed25519
				 keyid 630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6
				 keyid_hash_algorithms [u'sha256', u'sha512']


	-------->[demo/__init__.py]
			>>Action Perfomed:  Calling rt.import_ed25519_privatekey_from_file

	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Importing ed25519 privatekey from file with filepath: /home/joan/Escriptori/TFM/TFM/demo/keys/director password: pw
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]: Store the encrypted contents of '/home/joan/Escriptori/TFM/TFM/demo/keys/director' prior to calling the decryption routine
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  Return a string containing encrypted_key: 7f8fcae94b95a04baa1f07aa374937f9@@@@100000@@@@48d5bd2502df5d921e714f0782f42e1df1ae08ffb4d0dbf5df1923557096b005@@@@a724429acda285bfb3e7f2b4db0b0928@@@@f6056beade9cd29b105c8f82186b24f5e9257a11420ddf2e4056a6ce7907ffb334dc130c6f12268f0229a5b34364d6375cd398de2b3aea93f6fd55355a725b8352caea89a625bf020e7a2a165aec5f95794f73265779056f9e3a227469cf89f484ff4067e4fa50241492810c89a5a9e83945af92a41a37096068f7fd01976ec209c3156bfc9308c5e95a1381859bff06a62df2ad2aabb9f417e2588941b9239d6a6d130572de94813cfd089eefbe73fe59e297f047dac67e8dfa437360bbc7ec953a507ca69fc48a21dadb6124643f6bf3e813d603a5609391cf5c1b5b30321a3024f3a8f97f325e96be102d0dceba28bf1f5a4c7614c0e0ffd2b6819758e0d02ad1df6adb16e23282dc502a in non-encrypted form, using passphrase: pw
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'general']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  Decrypting encrypted_key: 7f8fcae94b95a04baa1f07aa374937f9@@@@100000@@@@48d5bd2502df5d921e714f0782f42e1df1ae08ffb4d0dbf5df1923557096b005@@@@a724429acda285bfb3e7f2b4db0b0928@@@@f6056beade9cd29b105c8f82186b24f5e9257a11420ddf2e4056a6ce7907ffb334dc130c6f12268f0229a5b34364d6375cd398de2b3aea93f6fd55355a725b8352caea89a625bf020e7a2a165aec5f95794f73265779056f9e3a227469cf89f484ff4067e4fa50241492810c89a5a9e83945af92a41a37096068f7fd01976ec209c3156bfc9308c5e95a1381859bff06a62df2ad2aabb9f417e2588941b9239d6a6d130572de94813cfd089eefbe73fe59e297f047dac67e8dfa437360bbc7ec953a507ca69fc48a21dadb6124643f6bf3e813d603a5609391cf5c1b5b30321a3024f3a8f97f325e96be102d0dceba28bf1f5a4c7614c0e0ffd2b6819758e0d02ad1df6adb16e23282dc502a password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  Decrypting file_contents: 7f8fcae94b95a04baa1f07aa374937f9@@@@100000@@@@48d5bd2502df5d921e714f0782f42e1df1ae08ffb4d0dbf5df1923557096b005@@@@a724429acda285bfb3e7f2b4db0b0928@@@@f6056beade9cd29b105c8f82186b24f5e9257a11420ddf2e4056a6ce7907ffb334dc130c6f12268f0229a5b34364d6375cd398de2b3aea93f6fd55355a725b8352caea89a625bf020e7a2a165aec5f95794f73265779056f9e3a227469cf89f484ff4067e4fa50241492810c89a5a9e83945af92a41a37096068f7fd01976ec209c3156bfc9308c5e95a1381859bff06a62df2ad2aabb9f417e2588941b9239d6a6d130572de94813cfd089eefbe73fe59e297f047dac67e8dfa437360bbc7ec953a507ca69fc48a21dadb6124643f6bf3e813d603a5609391cf5c1b5b30321a3024f3a8f97f325e96be102d0dceba28bf1f5a4c7614c0e0ffd2b6819758e0d02ad1df6adb16e23282dc502a password: pw
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  Generate a derived key by feeding password: pw salt: ? iterations: ?
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_generate_derived_key()]:  returning 
	--------> [tuf/pycrypto_keys.py]	>>Function:  [_decrypt()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [load_json_string()]:  Loading JSON string for data: {"keyval": {"private": "db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a", "public": "99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9"}, "keytype": "ed25519", "keyid": "630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6"}
	--------> [tuf/pycrypto_keys.py]	>>Function:  [decrypt_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [decrypt_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  Decrypted content of: ' /home/joan/Escriptori/TFM/TFM/demo/keys/director ':  {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_lib.py]	>>Function:  [import_ed25519_privatekey_from_file()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: imported [key_dirtarg_pri]
				 keytype ed25519
				 keyid 630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6
				 keyval
					 public 99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9
					 private db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a




Director: Initializing vehicle repositories
	[demo/demo_director.py]	>>Function:  [clean_slate()]: Creating demo Director instance
		[uptane/services/director.py]	>>Function:  [Director.__init__]:  Value for director_repos_dir:  /home/joan/Escriptori/TFM/TFM/director
		[uptane/services/director.py]	>>Function:  [Director.__init__]:  Value for key_root_pri:  {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
		[uptane/services/director.py]	>>Function:  [Director.__init__]:  Value for key_root_pub:  {u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}, u'keytype': u'ed25519', u'keyid': 'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyid_hash_algorithms': [u'sha256', u'sha512']}
		[uptane/services/director.py]	>>Function:  [Director.__init__]:  Value for key_timestamp_pri:  {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
		[uptane/services/director.py]	>>Function:  [Director.__init__]:  Value for key_timestamp_pub:  {u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}, u'keytype': u'ed25519', u'keyid': 'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyid_hash_algorithms': [u'sha256', u'sha512']}
		[uptane/services/director.py]	>>Function:  [Director.__init__]:  Value for key_snapshot_pri:  {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
		[uptane/services/director.py]	>>Function:  [Director.__init__]:  Value for key_snapshot_pub:  {u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}, u'keytype': u'ed25519', u'keyid': 'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyid_hash_algorithms': [u'sha256', u'sha512']}
		[uptane/services/director.py]	>>Function:  [Director.__init__]:  Value for key_targets_pri:  {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
		[uptane/services/director.py]	>>Function:  [Director.__init__]:  Value for key_targets_pub:  {u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}, u'keytype': u'ed25519', u'keyid': '630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyid_hash_algorithms': [u'sha256', u'sha512']}
		[uptane/services/director.py]	>>Function:  [Director.__init__]: Checking format of: /home/joan/Escriptori/TFM/TFM/director
	[demo/demo_director.py]	>>Function:  [clean_slate()]: Adding new vehicle to director instance with vin: 111
		[uptane/services/inventorydb.py]	>>Function:  [_check_registration_is_sane()]: Checking format of vin: 111
	--------> [tuf/repository_tool.py]	>>Function:  [create_new_repository()]:  Creating new repository_directory: 111 repository_name: 111
Creating u'/home/joan/Escriptori/TFM/TFM/director/111'
Creating u'/home/joan/Escriptori/TFM/TFM/director/111/metadata.staged'
Creating u'/home/joan/Escriptori/TFM/TFM/director/111/targets'
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Initializating repository_directory: /home/joan/Escriptori/TFM/TFM/director/111 metadata_directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged targets_directory: /home/joan/Escriptori/TFM/TFM/director/111/targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [create_roledb()]:  Creating new roleDB for repository:  111
	--------> [tuf/roledb.py]	>>Function:  [create_roledb()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [create_keydb()]:  Create new keyDB for repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [create_keydb()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Setting the top-level roles
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Root.__init__()]:  Initializating root
	--------> [tuf/repository_tool.py]	>>Function:  [Root.__init__()]:  roleinfo:  {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: root with roleinfo: {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []} with repository_name 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  root
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  111
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Root added to roleDB. Value for self.root:  <tuf.repository_tool.Root object at 0x7f87909aebd0>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Initializating Snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Value for self._rolename:  snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Value for self._repository_name:  111
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: snapshot with roleinfo: {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-19T19:50:28Z', u'signing_keyids': []} with repository_name 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  snapshot
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-19T19:50:28Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  111
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.snapshot:  <tuf.repository_tool.Snapshot object at 0x7f87909aed50>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Initializating Timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Value for self._rolename:  timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Value for self._repository_name:  111
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: timestamp with roleinfo: {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-13T19:50:28Z', u'signing_keyids': []} with repository_name 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  timestamp
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-13T19:50:28Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  111
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.timestamp:  <tuf.repository_tool.Timestamp object at 0x7f879094e090>
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Initializating Targets
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._targets_directory:  /home/joan/Escriptori/TFM/TFM/director/111/targets
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._rolename:  targets
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._repository_name:  111
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._target_files:  []
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._delegated_roles:  {}
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._parent_targets_object:  <tuf.repository_tool.Targets object at 0x7f879094e990>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: targets with roleinfo: {u'signatures': [], u'keyids': [], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'signing_keyids': [], u'paths': {}, u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'delegations': {u'keys': {}, u'roles': []}, u'path_hash_prefixes': []} with repository_name 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  targets
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'signatures': [], u'keyids': [], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'signing_keyids': [], u'paths': {}, u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'delegations': {u'keys': {}, u'roles': []}, u'path_hash_prefixes': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  111
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.targets:  <tuf.repository_tool.Targets object at 0x7f879094e990>
	--------> [tuf/repository_tool.py]	>>Function:  [create_new_repository()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: root Value for key:  {u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}, u'keytype': u'ed25519', u'keyid': 'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyid_hash_algorithms': [u'sha256', u'sha512']} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}, u'keytype': u'ed25519', u'keyid': 'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2021-02-12T01:38:48Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 0, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: timestamp Value for key:  {u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}, u'keytype': u'ed25519', u'keyid': 'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyid_hash_algorithms': [u'sha256', u'sha512']} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}, u'keytype': u'ed25519', u'keyid': 'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2020-02-13T19:50:28Z', u'version': 0, u'compressions': [u''], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: snapshot Value for key:  {u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}, u'keytype': u'ed25519', u'keyid': 'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyid_hash_algorithms': [u'sha256', u'sha512']} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}, u'keytype': u'ed25519', u'keyid': 'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2020-02-19T19:50:28Z', u'version': 0, u'compressions': [u''], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: targets Value for key:  {u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}, u'keytype': u'ed25519', u'keyid': '630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyid_hash_algorithms': [u'sha256', u'sha512']} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}, u'keytype': u'ed25519', u'keyid': '630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'version': 0, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [], u'compressions': [u'']} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: root key: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 0, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: timestamp key: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'expires': u'2020-02-13T19:50:28Z', u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'threshold': 1, u'signing_keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: snapshot key: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'expires': u'2020-02-19T19:50:28Z', u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'threshold': 1, u'signing_keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: targets key: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 111 key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'expires': u'2020-05-14T03:17:38Z', u'version': 0, u'compressions': [u''], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'threshold': 1, u'signing_keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'path_hash_prefixes': []} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: Adding new vehicle to director instance with vin: 112
		[uptane/services/inventorydb.py]	>>Function:  [_check_registration_is_sane()]: Checking format of vin: 112
	--------> [tuf/repository_tool.py]	>>Function:  [create_new_repository()]:  Creating new repository_directory: 112 repository_name: 112
Creating u'/home/joan/Escriptori/TFM/TFM/director/112'
Creating u'/home/joan/Escriptori/TFM/TFM/director/112/metadata.staged'
Creating u'/home/joan/Escriptori/TFM/TFM/director/112/targets'
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Initializating repository_directory: /home/joan/Escriptori/TFM/TFM/director/112 metadata_directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged targets_directory: /home/joan/Escriptori/TFM/TFM/director/112/targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [create_roledb()]:  Creating new roleDB for repository:  112
	--------> [tuf/roledb.py]	>>Function:  [create_roledb()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [create_keydb()]:  Create new keyDB for repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [create_keydb()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Setting the top-level roles
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Root.__init__()]:  Initializating root
	--------> [tuf/repository_tool.py]	>>Function:  [Root.__init__()]:  roleinfo:  {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: root with roleinfo: {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []} with repository_name 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  root
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  112
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Root added to roleDB. Value for self.root:  <tuf.repository_tool.Root object at 0x7f879094ebd0>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Initializating Snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Value for self._rolename:  snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Value for self._repository_name:  112
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: snapshot with roleinfo: {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-19T19:50:28Z', u'signing_keyids': []} with repository_name 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  snapshot
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-19T19:50:28Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  112
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.snapshot:  <tuf.repository_tool.Snapshot object at 0x7f879094ecd0>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Initializating Timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Value for self._rolename:  timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Value for self._repository_name:  112
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: timestamp with roleinfo: {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-13T19:50:28Z', u'signing_keyids': []} with repository_name 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  timestamp
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-13T19:50:28Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  112
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.timestamp:  <tuf.repository_tool.Timestamp object at 0x7f879094ec90>
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Initializating Targets
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._targets_directory:  /home/joan/Escriptori/TFM/TFM/director/112/targets
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._rolename:  targets
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._repository_name:  112
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._target_files:  []
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._delegated_roles:  {}
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._parent_targets_object:  <tuf.repository_tool.Targets object at 0x7f879094e1d0>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: targets with roleinfo: {u'signatures': [], u'keyids': [], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'signing_keyids': [], u'paths': {}, u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'delegations': {u'keys': {}, u'roles': []}, u'path_hash_prefixes': []} with repository_name 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  targets
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'signatures': [], u'keyids': [], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'signing_keyids': [], u'paths': {}, u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'delegations': {u'keys': {}, u'roles': []}, u'path_hash_prefixes': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  112
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.targets:  <tuf.repository_tool.Targets object at 0x7f879094e1d0>
	--------> [tuf/repository_tool.py]	>>Function:  [create_new_repository()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: root Value for key:  {u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}, u'keytype': u'ed25519', u'keyid': 'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2021-02-12T01:38:48Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}, u'keytype': u'ed25519', u'keyid': 'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2021-02-12T01:38:48Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 0, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: timestamp Value for key:  {u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}, u'keytype': u'ed25519', u'keyid': 'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}, u'keytype': u'ed25519', u'keyid': 'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2020-02-13T19:50:28Z', u'version': 0, u'compressions': [u''], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: snapshot Value for key:  {u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}, u'keytype': u'ed25519', u'keyid': 'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}, u'keytype': u'ed25519', u'keyid': 'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2020-02-19T19:50:28Z', u'version': 0, u'compressions': [u''], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: targets Value for key:  {u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}, u'keytype': u'ed25519', u'keyid': '630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}, u'keytype': u'ed25519', u'keyid': '630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'version': 0, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [], u'compressions': [u'']} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: root key: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 0, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: timestamp key: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'expires': u'2020-02-13T19:50:28Z', u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'threshold': 1, u'signing_keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: snapshot key: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'expires': u'2020-02-19T19:50:28Z', u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'threshold': 1, u'signing_keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: targets key: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 112 key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'expires': u'2020-05-14T03:17:38Z', u'version': 0, u'compressions': [u''], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'threshold': 1, u'signing_keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'path_hash_prefixes': []} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: Adding new vehicle to director instance with vin: 113
		[uptane/services/inventorydb.py]	>>Function:  [_check_registration_is_sane()]: Checking format of vin: 113
	--------> [tuf/repository_tool.py]	>>Function:  [create_new_repository()]:  Creating new repository_directory: 113 repository_name: 113
Creating u'/home/joan/Escriptori/TFM/TFM/director/113'
Creating u'/home/joan/Escriptori/TFM/TFM/director/113/metadata.staged'
Creating u'/home/joan/Escriptori/TFM/TFM/director/113/targets'
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Initializating repository_directory: /home/joan/Escriptori/TFM/TFM/director/113 metadata_directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged targets_directory: /home/joan/Escriptori/TFM/TFM/director/113/targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [create_roledb()]:  Creating new roleDB for repository:  113
	--------> [tuf/roledb.py]	>>Function:  [create_roledb()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [create_keydb()]:  Create new keyDB for repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [create_keydb()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Setting the top-level roles
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Root.__init__()]:  Initializating root
	--------> [tuf/repository_tool.py]	>>Function:  [Root.__init__()]:  roleinfo:  {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: root with roleinfo: {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []} with repository_name 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  root
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  113
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Root added to roleDB. Value for self.root:  <tuf.repository_tool.Root object at 0x7f879094ea90>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Initializating Snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Value for self._rolename:  snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Value for self._repository_name:  113
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: snapshot with roleinfo: {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-19T19:50:28Z', u'signing_keyids': []} with repository_name 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  snapshot
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-19T19:50:28Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  113
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.snapshot:  <tuf.repository_tool.Snapshot object at 0x7f879094ec50>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Initializating Timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Value for self._rolename:  timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Value for self._repository_name:  113
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: timestamp with roleinfo: {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-13T19:50:28Z', u'signing_keyids': []} with repository_name 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  timestamp
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-13T19:50:28Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  113
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.timestamp:  <tuf.repository_tool.Timestamp object at 0x7f879094ec10>
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Initializating Targets
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._targets_directory:  /home/joan/Escriptori/TFM/TFM/director/113/targets
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._rolename:  targets
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._repository_name:  113
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._target_files:  []
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._delegated_roles:  {}
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._parent_targets_object:  <tuf.repository_tool.Targets object at 0x7f879094ed10>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: targets with roleinfo: {u'signatures': [], u'keyids': [], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'signing_keyids': [], u'paths': {}, u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'delegations': {u'keys': {}, u'roles': []}, u'path_hash_prefixes': []} with repository_name 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  targets
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'signatures': [], u'keyids': [], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'signing_keyids': [], u'paths': {}, u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'delegations': {u'keys': {}, u'roles': []}, u'path_hash_prefixes': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  113
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.targets:  <tuf.repository_tool.Targets object at 0x7f879094ed10>
	--------> [tuf/repository_tool.py]	>>Function:  [create_new_repository()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: root Value for key:  {u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}, u'keytype': u'ed25519', u'keyid': 'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2021-02-12T01:38:48Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}, u'keytype': u'ed25519', u'keyid': 'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2021-02-12T01:38:48Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 0, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: timestamp Value for key:  {u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}, u'keytype': u'ed25519', u'keyid': 'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}, u'keytype': u'ed25519', u'keyid': 'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2020-02-13T19:50:28Z', u'version': 0, u'compressions': [u''], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: snapshot Value for key:  {u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}, u'keytype': u'ed25519', u'keyid': 'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}, u'keytype': u'ed25519', u'keyid': 'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2020-02-19T19:50:28Z', u'version': 0, u'compressions': [u''], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: targets Value for key:  {u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}, u'keytype': u'ed25519', u'keyid': '630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}, u'keytype': u'ed25519', u'keyid': '630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'version': 0, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [], u'compressions': [u'']} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: root key: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 0, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: timestamp key: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'expires': u'2020-02-13T19:50:28Z', u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'threshold': 1, u'signing_keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: snapshot key: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'expires': u'2020-02-19T19:50:28Z', u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'threshold': 1, u'signing_keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: targets key: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: 113 key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'expires': u'2020-05-14T03:17:38Z', u'version': 0, u'compressions': [u''], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'threshold': 1, u'signing_keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'path_hash_prefixes': []} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: Adding new vehicle to director instance with vin: democar
		[uptane/services/inventorydb.py]	>>Function:  [_check_registration_is_sane()]: Checking format of vin: democar
	--------> [tuf/repository_tool.py]	>>Function:  [create_new_repository()]:  Creating new repository_directory: democar repository_name: democar
Creating u'/home/joan/Escriptori/TFM/TFM/director/democar'
Creating u'/home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged'
Creating u'/home/joan/Escriptori/TFM/TFM/director/democar/targets'
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Initializating repository_directory: /home/joan/Escriptori/TFM/TFM/director/democar metadata_directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged targets_directory: /home/joan/Escriptori/TFM/TFM/director/democar/targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [create_roledb()]:  Creating new roleDB for repository:  democar
	--------> [tuf/roledb.py]	>>Function:  [create_roledb()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [create_keydb()]:  Create new keyDB for repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [create_keydb()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Setting the top-level roles
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Root.__init__()]:  Initializating root
	--------> [tuf/repository_tool.py]	>>Function:  [Root.__init__()]:  roleinfo:  {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: root with roleinfo: {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []} with repository_name democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  root
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'consistent_snapshot': False, u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2021-02-12T01:38:48Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  democar
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Root added to roleDB. Value for self.root:  <tuf.repository_tool.Root object at 0x7f879094e450>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Initializating Snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Value for self._rolename:  snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Snapshot.__init__()]:  Value for self._repository_name:  democar
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: snapshot with roleinfo: {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-19T19:50:28Z', u'signing_keyids': []} with repository_name democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  snapshot
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-19T19:50:28Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  democar
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.snapshot:  <tuf.repository_tool.Snapshot object at 0x7f879094e2d0>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Initializating Timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Value for self._rolename:  timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Timestamp.__init__()]:  Value for self._repository_name:  democar
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: timestamp with roleinfo: {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-13T19:50:28Z', u'signing_keyids': []} with repository_name democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  timestamp
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'partial_loaded': False, u'signatures': [], u'version': 0, u'keyids': [], u'threshold': 1, u'compressions': [u''], u'expires': u'2020-02-13T19:50:28Z', u'signing_keyids': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  democar
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.timestamp:  <tuf.repository_tool.Timestamp object at 0x7f879094e050>
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Initializating Targets
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.__init__()]:  Initializating metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._targets_directory:  /home/joan/Escriptori/TFM/TFM/director/democar/targets
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._rolename:  targets
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._repository_name:  democar
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._target_files:  []
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._delegated_roles:  {}
	--------> [tuf/repository_tool.py]	>>Function:  [Targets.__init__()]:  Value for self._parent_targets_object:  <tuf.repository_tool.Targets object at 0x7f879094e310>
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Adding role: targets with roleinfo: {u'signatures': [], u'keyids': [], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'signing_keyids': [], u'paths': {}, u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'delegations': {u'keys': {}, u'roles': []}, u'path_hash_prefixes': []} with repository_name democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for rolename:  targets
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for roleinfo:  {u'signatures': [], u'keyids': [], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'signing_keyids': [], u'paths': {}, u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'delegations': {u'keys': {}, u'roles': []}, u'path_hash_prefixes': []}
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  Value for repository_name:  democar
	--------> [tuf/roledb.py]	>>Function:  [add_role()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.__init__()]:  Value for self.targets:  <tuf.repository_tool.Targets object at 0x7f879094e310>
	--------> [tuf/repository_tool.py]	>>Function:  [create_new_repository()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: root Value for key:  {u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}, u'keytype': u'ed25519', u'keyid': 'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2021-02-12T01:38:48Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}, u'keytype': u'ed25519', u'keyid': 'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2021-02-12T01:38:48Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 0, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: timestamp Value for key:  {u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}, u'keytype': u'ed25519', u'keyid': 'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}, u'keytype': u'ed25519', u'keyid': 'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2020-02-13T19:50:28Z', u'version': 0, u'compressions': [u''], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: snapshot Value for key:  {u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}, u'keytype': u'ed25519', u'keyid': 'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}, u'keytype': u'ed25519', u'keyid': 'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2020-02-19T19:50:28Z', u'version': 0, u'compressions': [u''], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'threshold': 1, u'signing_keyids': []} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  Adding verification key for rolename: targets Value for key:  {u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}, u'keytype': u'ed25519', u'keyid': '630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} Value for expires: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}, u'keytype': u'ed25519', u'keyid': '630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'expires': u'2020-02-13T19:50:28Z'} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'version': 0, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [], u'compressions': [u'']} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.add_verification_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: root key: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 0, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: timestamp key: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'expires': u'2020-02-13T19:50:28Z', u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'threshold': 1, u'signing_keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: snapshot key: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'expires': u'2020-02-19T19:50:28Z', u'partial_loaded': False, u'version': 0, u'compressions': [u''], u'threshold': 1, u'signing_keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  Loading signing key for rolename: targets key: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} keyid: None
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  EXCEPTION key already exists: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  Removing key from keyDB:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [remove_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  Adding key to keyDB for repository_name: democar key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} keyid: None
	--------> [tuf/keydb.py]	>>Function:  [add_key()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  END EXCEPTION key arleady added: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.rolename()]:  Getter. Returning rolename 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.repository_name()]:  Getter. Returning repository_name 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'expires': u'2020-05-14T03:17:38Z', u'version': 0, u'compressions': [u''], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'threshold': 1, u'signing_keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'path_hash_prefixes': []} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Metadata.load_signing_key()]:  returning 
	[demo/demo_director.py]	>>Function:  [clean_slate()]: Adding first files
Director: Signing and hosting initial repository metadata
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.mark_dirty()]:  Marking dirty roles:  [u'timestamp', u'snapshot']
	--------> [tuf/roledb.py]	>>Function:  [mark_dirty()]:  Mark_dirty roles: [u'timestamp', u'snapshot'] repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [mark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.mark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Write all the JSON Metadata objects to their corresponding files. write() raises an exception if any of the role metadata to be written to disk is invalid, such as an insufficient threshold of signatures, missing private keys, etc.
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  Getting dirty roles for repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  Getting dirty roles for repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  dirty_rolenames: [u'timestamp', u'root', u'snapshot', u'targets']
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: root
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: targets
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  END-FOR-LOOP



	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: root metadata_filename: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/root.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/democar/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_root_metadata()]:  Creating root metadata.  'tuf.roledb.py' and 'tuf.keydb.py' are read and the information returned by these modules is used to generate the root metadata object.
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_root_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/root.der metadata_object: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with keyids: [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'] repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/root.der' with key: fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: root has rights for sign signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: democar
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: root repository_name: democar signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 1, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/root.der metadata_object: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with keyids: [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'] repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/root.der' with key: fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: root has rights for sign signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: democar
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: root repository_name: democar signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/root.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/root.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: targets metadata_filename: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/targets.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/democar/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [generate_targets_metadata()]:  Generating targets metadata object. The targets in 'target_files' must exist at the same path they should on the repo. 'target_files' is a list of targets.  The 'custom' field of the targets metadata is not currently supported.
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/democar/targets
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_targets_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/targets.der metadata_object: {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with keyids: [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'] repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/targets.der' with key: 630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: targets has rights for sign signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: democar
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: targets repository_name: democar signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'version': 1, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'compressions': [u'']} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/targets.der metadata_object: {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with keyids: [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'] repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/targets.der' with key: 630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: targets has rights for sign signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: democar
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: targets repository_name: democar signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/targets.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/targets.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: snapshot metadata_filename: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/snapshot.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/democar/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_snapshot_metadata()]:  Generating snapshot metadata. The minimum metadata must exist (i.e., 'root.json' and 'targets.json'). This function searches 'metadata_directory' and the resulting snapshot file will list all the delegated roles found there.
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: targets.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: root.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: targets.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: root.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [generate_snapshot_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/snapshot.der metadata_object: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with keyids: [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'] repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/snapshot.der' with key: f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: snapshot has rights for sign signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: democar
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: snapshot repository_name: democar signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'expires': u'2020-02-19T19:50:28Z', u'threshold': 1, u'version': 1, u'compressions': [u''], u'partial_loaded': False, u'signing_keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/snapshot.der metadata_object: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with keyids: [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'] repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/snapshot.der' with key: f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: snapshot has rights for sign signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: democar
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: snapshot repository_name: democar signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/snapshot.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/snapshot.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: timestamp metadata_filename: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/timestamp.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/democar/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  Generating timestamp metadata object. The 'snapshot.json' file must exist.
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/snapshot.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  Returning Timestamp Metadata schema with corresponding format
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
u'timestamp.der' expires Thu Feb 13 19:50:28 2020 (UTC).
1.0 day(s) until it expires.
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/timestamp.der metadata_object: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with keyids: [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'] repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/timestamp.der' with key: da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: timestamp has rights for sign signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: democar
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: timestamp repository_name: democar signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'expires': u'2020-02-13T19:50:28Z', u'threshold': 1, u'version': 1, u'compressions': [u''], u'partial_loaded': False, u'signing_keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']} Mark role as dirty: True repository name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/timestamp.der metadata_object: {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with keyids: [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'] repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/timestamp.der' with key: da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: timestamp has rights for sign signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: democar
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: timestamp repository_name: democar signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: democar
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/timestamp.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/timestamp.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/timestamp.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged/timestamp.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.unmark_dirty()]:  Unmarking dirty roles: [u'timestamp', u'root', u'snapshot', u'targets']
	--------> [tuf/roledb.py]	>>Function:  [unmark_dirty()]:  unmarking dirty roles: [u'timestamp', u'root', u'snapshot', u'targets'] repository_name: democar
	--------> [tuf/roledb.py]	>>Function:  [unmark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.unmark_dirty()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_delete_obsolete_metadata()]:  Deleting obsolete metadata for metadata_directory: /home/joan/Escriptori/TFM/TFM/director/democar/metadata.staged snapshot_metadata: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} consistent_snapshot: False repository_name: democar
	--------> [tuf/repository_lib.py]	>>Function:  [_delete_obsolete_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.mark_dirty()]:  Marking dirty roles:  [u'timestamp', u'snapshot']
	--------> [tuf/roledb.py]	>>Function:  [mark_dirty()]:  Mark_dirty roles: [u'timestamp', u'snapshot'] repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [mark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.mark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Write all the JSON Metadata objects to their corresponding files. write() raises an exception if any of the role metadata to be written to disk is invalid, such as an insufficient threshold of signatures, missing private keys, etc.
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  Getting dirty roles for repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  Getting dirty roles for repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  dirty_rolenames: [u'timestamp', u'root', u'snapshot', u'targets']
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: root
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: targets
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  END-FOR-LOOP



	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: root metadata_filename: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/root.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/111/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_root_metadata()]:  Creating root metadata.  'tuf.roledb.py' and 'tuf.keydb.py' are read and the information returned by these modules is used to generate the root metadata object.
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_root_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/root.der metadata_object: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with keyids: [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'] repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/root.der' with key: fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: root has rights for sign signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: 111
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: root repository_name: 111 signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 1, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/root.der metadata_object: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with keyids: [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'] repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/root.der' with key: fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: root has rights for sign signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: 111
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: root repository_name: 111 signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/root.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/root.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: targets metadata_filename: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/targets.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/111/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [generate_targets_metadata()]:  Generating targets metadata object. The targets in 'target_files' must exist at the same path they should on the repo. 'target_files' is a list of targets.  The 'custom' field of the targets metadata is not currently supported.
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/111/targets
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_targets_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/targets.der metadata_object: {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with keyids: [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'] repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/targets.der' with key: 630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: targets has rights for sign signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: 111
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: targets repository_name: 111 signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'version': 1, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'compressions': [u'']} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/targets.der metadata_object: {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with keyids: [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'] repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/targets.der' with key: 630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: targets has rights for sign signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: 111
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: targets repository_name: 111 signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/targets.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/targets.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: snapshot metadata_filename: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/snapshot.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/111/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_snapshot_metadata()]:  Generating snapshot metadata. The minimum metadata must exist (i.e., 'root.json' and 'targets.json'). This function searches 'metadata_directory' and the resulting snapshot file will list all the delegated roles found there.
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: targets.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: root.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: targets.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: root.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [generate_snapshot_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/snapshot.der metadata_object: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with keyids: [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'] repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/snapshot.der' with key: f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: snapshot has rights for sign signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: 111
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: snapshot repository_name: 111 signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'expires': u'2020-02-19T19:50:28Z', u'threshold': 1, u'version': 1, u'compressions': [u''], u'partial_loaded': False, u'signing_keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/snapshot.der metadata_object: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with keyids: [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'] repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/snapshot.der' with key: f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: snapshot has rights for sign signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: 111
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: snapshot repository_name: 111 signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/snapshot.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/snapshot.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: timestamp metadata_filename: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/timestamp.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/111/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  Generating timestamp metadata object. The 'snapshot.json' file must exist.
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/snapshot.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  Returning Timestamp Metadata schema with corresponding format
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
u'timestamp.der' expires Thu Feb 13 19:50:28 2020 (UTC).
1.0 day(s) until it expires.
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/timestamp.der metadata_object: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with keyids: [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'] repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/timestamp.der' with key: da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: timestamp has rights for sign signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: 111
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: timestamp repository_name: 111 signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'expires': u'2020-02-13T19:50:28Z', u'threshold': 1, u'version': 1, u'compressions': [u''], u'partial_loaded': False, u'signing_keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']} Mark role as dirty: True repository name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/timestamp.der metadata_object: {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with keyids: [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'] repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/timestamp.der' with key: da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: timestamp has rights for sign signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: 111
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: timestamp repository_name: 111 signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 111
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/timestamp.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/timestamp.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/timestamp.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged/timestamp.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.unmark_dirty()]:  Unmarking dirty roles: [u'timestamp', u'root', u'snapshot', u'targets']
	--------> [tuf/roledb.py]	>>Function:  [unmark_dirty()]:  unmarking dirty roles: [u'timestamp', u'root', u'snapshot', u'targets'] repository_name: 111
	--------> [tuf/roledb.py]	>>Function:  [unmark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.unmark_dirty()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_delete_obsolete_metadata()]:  Deleting obsolete metadata for metadata_directory: /home/joan/Escriptori/TFM/TFM/director/111/metadata.staged snapshot_metadata: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} consistent_snapshot: False repository_name: 111
	--------> [tuf/repository_lib.py]	>>Function:  [_delete_obsolete_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.mark_dirty()]:  Marking dirty roles:  [u'timestamp', u'snapshot']
	--------> [tuf/roledb.py]	>>Function:  [mark_dirty()]:  Mark_dirty roles: [u'timestamp', u'snapshot'] repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [mark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.mark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Write all the JSON Metadata objects to their corresponding files. write() raises an exception if any of the role metadata to be written to disk is invalid, such as an insufficient threshold of signatures, missing private keys, etc.
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  Getting dirty roles for repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  Getting dirty roles for repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  dirty_rolenames: [u'timestamp', u'root', u'snapshot', u'targets']
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: root
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: targets
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  END-FOR-LOOP



	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: root metadata_filename: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/root.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/113/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_root_metadata()]:  Creating root metadata.  'tuf.roledb.py' and 'tuf.keydb.py' are read and the information returned by these modules is used to generate the root metadata object.
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_root_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/root.der metadata_object: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with keyids: [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'] repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/root.der' with key: fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: root has rights for sign signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: 113
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: root repository_name: 113 signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 1, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/root.der metadata_object: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with keyids: [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'] repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/root.der' with key: fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: root has rights for sign signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: 113
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: root repository_name: 113 signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/root.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/root.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: targets metadata_filename: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/targets.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/113/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [generate_targets_metadata()]:  Generating targets metadata object. The targets in 'target_files' must exist at the same path they should on the repo. 'target_files' is a list of targets.  The 'custom' field of the targets metadata is not currently supported.
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/113/targets
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_targets_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/targets.der metadata_object: {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with keyids: [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'] repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/targets.der' with key: 630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: targets has rights for sign signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: 113
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: targets repository_name: 113 signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'version': 1, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'compressions': [u'']} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/targets.der metadata_object: {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with keyids: [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'] repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/targets.der' with key: 630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: targets has rights for sign signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: 113
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: targets repository_name: 113 signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/targets.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/targets.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: snapshot metadata_filename: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/snapshot.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/113/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_snapshot_metadata()]:  Generating snapshot metadata. The minimum metadata must exist (i.e., 'root.json' and 'targets.json'). This function searches 'metadata_directory' and the resulting snapshot file will list all the delegated roles found there.
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: targets.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: root.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: targets.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: root.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [generate_snapshot_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/snapshot.der metadata_object: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with keyids: [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'] repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/snapshot.der' with key: f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: snapshot has rights for sign signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: 113
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: snapshot repository_name: 113 signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'expires': u'2020-02-19T19:50:28Z', u'threshold': 1, u'version': 1, u'compressions': [u''], u'partial_loaded': False, u'signing_keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/snapshot.der metadata_object: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with keyids: [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'] repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/snapshot.der' with key: f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: snapshot has rights for sign signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: 113
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: snapshot repository_name: 113 signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/snapshot.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/snapshot.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: timestamp metadata_filename: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/timestamp.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/113/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  Generating timestamp metadata object. The 'snapshot.json' file must exist.
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/snapshot.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  Returning Timestamp Metadata schema with corresponding format
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
u'timestamp.der' expires Thu Feb 13 19:50:28 2020 (UTC).
0.999988425925926 day(s) until it expires.
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/timestamp.der metadata_object: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with keyids: [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'] repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/timestamp.der' with key: da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: timestamp has rights for sign signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: 113
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: timestamp repository_name: 113 signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'expires': u'2020-02-13T19:50:28Z', u'threshold': 1, u'version': 1, u'compressions': [u''], u'partial_loaded': False, u'signing_keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']} Mark role as dirty: True repository name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/timestamp.der metadata_object: {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with keyids: [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'] repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/timestamp.der' with key: da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: timestamp has rights for sign signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: 113
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: timestamp repository_name: 113 signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 113
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/timestamp.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/timestamp.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/timestamp.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged/timestamp.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.unmark_dirty()]:  Unmarking dirty roles: [u'timestamp', u'root', u'snapshot', u'targets']
	--------> [tuf/roledb.py]	>>Function:  [unmark_dirty()]:  unmarking dirty roles: [u'timestamp', u'root', u'snapshot', u'targets'] repository_name: 113
	--------> [tuf/roledb.py]	>>Function:  [unmark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.unmark_dirty()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_delete_obsolete_metadata()]:  Deleting obsolete metadata for metadata_directory: /home/joan/Escriptori/TFM/TFM/director/113/metadata.staged snapshot_metadata: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} consistent_snapshot: False repository_name: 113
	--------> [tuf/repository_lib.py]	>>Function:  [_delete_obsolete_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.mark_dirty()]:  Marking dirty roles:  [u'timestamp', u'snapshot']
	--------> [tuf/roledb.py]	>>Function:  [mark_dirty()]:  Mark_dirty roles: [u'timestamp', u'snapshot'] repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [mark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.mark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Write all the JSON Metadata objects to their corresponding files. write() raises an exception if any of the role metadata to be written to disk is invalid, such as an insufficient threshold of signatures, missing private keys, etc.
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  Getting dirty roles for repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  Getting dirty roles for repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [get_dirty_roles()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  dirty_rolenames: [u'timestamp', u'root', u'snapshot', u'targets']
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: timestamp
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: root
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: snapshot
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  Inside-for-loop: targets
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  END-FOR-LOOP



	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: root metadata_filename: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/root.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/112/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_root_metadata()]:  Creating root metadata.  'tuf.roledb.py' and 'tuf.keydb.py' are read and the information returned by these modules is used to generate the root metadata object.
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'keytype: ed25519 key_value: {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'} private: False
	-------- --------> [tuf/keys.py]	>>Function:  [format_keyval_to_metadata()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_root_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/root.der metadata_object: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with keyids: [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'] repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/root.der' with key: fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: root has rights for sign signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: 112
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: root repository_name: 112 signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 0, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'818a9dba631e36532ce404a98cfc22ee2cf5e6ecdc4cdff3e4afda1908eac29d580525b367cb7ffad30e750f264a1b2703640dd1e81d9485417e7ea97041eb0d', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  root With roleinfo: {u'signatures': [], u'partial_loaded': False, u'expires': u'2021-02-12T01:38:48Z', u'version': 1, u'consistent_snapshot': False, u'compressions': [u''], u'keyids': ['fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'], u'threshold': 1, u'signing_keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/root.der metadata_object: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with keyids: [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2'] repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/root.der' with key: fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']} with key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: root has rights for sign signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: 112
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: root repository_name: 112 signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}} repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79', u'private': u'0a28c759f75d527d73dc4d0ac108d0a75cd45de089ed639d81cf33754d866a68'}} produced signature: {u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/root.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/root.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2', u'sig': u'3d74862c310dd4eec8b5ae03fdadf60012b67fee786b24c00904f1c897e886b5047ae769aa04435dd610fe770f6db1937c3835979d0d70ccc00d1f22965b3702', u'method': u'ed25519'}], u'signed': {'_type': u'Root', 'roles': {u'snapshot': {u'threshold': 1, u'keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']}, u'root': {u'threshold': 1, u'keyids': [u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2']}, u'targets': {u'threshold': 1, u'keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6']}, u'timestamp': {u'threshold': 1, u'keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']}}, 'keys': {u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c'}}, u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9'}}, u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2'}}, u'fdba7eaa358fa5a8113a789f60c4a6ce29c4478d8d8eff3e27d1d77416696ab2': {u'keytype': u'ed25519', u'keyid_hash_algorithms': [u'sha256', u'sha512'], u'keyval': {u'public': u'f3b4c231520580eca92e17ae1581a708f606f72d43cc200af493afeec22a5e79'}}}, 'expires': u'2021-02-12T01:38:48Z', 'version': 1, 'consistent_snapshot': False, 'compression_algorithms': [u'gz']}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: root
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: targets metadata_filename: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/targets.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/112/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [generate_targets_metadata()]:  Generating targets metadata object. The targets in 'target_files' must exist at the same path they should on the repo. 'target_files' is a list of targets.  The 'custom' field of the targets metadata is not currently supported.
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/112/targets
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_targets_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/targets.der metadata_object: {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with keyids: [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'] repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/targets.der' with key: 630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: targets has rights for sign signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: 112
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: targets repository_name: 112 signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 0, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'25e3732281e9d6b61bc92939b992ea7b14f66e2c1b97a91a88453810aad32cd0c5d4a3cd53dff94cb8c03410b6a9357dbc9392396df984edcf4f04e96ffc1902', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  targets With roleinfo: {u'paths': {}, u'signatures': [], u'keyids': ['630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'expires': u'2020-05-14T03:17:38Z', u'threshold': 1, u'version': 1, u'path_hash_prefixes': [], u'delegations': {u'keys': {}, u'roles': []}, u'partial_loaded': False, u'signing_keyids': [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'], u'compressions': [u'']} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/targets.der metadata_object: {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with keyids: [u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6'] repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/targets.der' with key: 630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}} with key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: targets has rights for sign signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: 112
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: targets repository_name: 112 signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}} repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'keyval': {u'public': u'99ef8790687ca252c4677a80a34e401efb7e17ccdf9b0fcb5f1bc3260c432cb9', u'private': u'db68f9c0831e405a8168f9225c51d645f4f58aabe729ed0297aac650df132c2a'}} produced signature: {u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/targets.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'630cf584f392430b2119a4395e39624e86f5e5c5374507a789be5cf35bf090d6', u'sig': u'b3ed21b0a76305bc98cccafa922eea8c8c7346fa0dcc654f26dc03f06721062636feff95eda8647ac570f51d1fed48fb20adc6a86c2422080c9ddeb11be37f0b', u'method': u'ed25519'}], u'signed': {'_type': u'Targets', 'version': 1, 'targets': {}, 'expires': u'2020-05-14T03:17:38Z', 'delegations': {u'keys': {}, u'roles': []}}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: targets
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/targets.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: snapshot metadata_filename: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/snapshot.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/112/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_snapshot_metadata()]:  Generating snapshot metadata. The minimum metadata must exist (i.e., 'root.json' and 'targets.json'). This function searches 'metadata_directory' and the resulting snapshot file will list all the delegated roles found there.
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/root.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: targets.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: targets repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: targets
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: root.der
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  Verifying if role exists. role: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: root repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: root
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [role_exists()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: targets.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [_strip_version_number()]:  Returning version number from metadata_filename: root.der.gz
	--------> [tuf/repository_lib.py]	>>Function:  [generate_snapshot_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/snapshot.der metadata_object: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with keyids: [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'] repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/snapshot.der' with key: f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: snapshot has rights for sign signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: 112
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: snapshot repository_name: 112 signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 0, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'597d26ee9a726d5d42e3d7be7e4934cdcd4f9c8c13719c4c3959f2f740445cc8a0930d23b70ecb81ada7b01f4428e0932b7c9ef135c4a1dfb7ae43589563c305', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  snapshot With roleinfo: {u'signatures': [], u'keyids': ['f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'], u'expires': u'2020-02-19T19:50:28Z', u'threshold': 1, u'version': 1, u'compressions': [u''], u'partial_loaded': False, u'signing_keyids': [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97']} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/snapshot.der metadata_object: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with keyids: [u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97'] repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/snapshot.der' with key: f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: snapshot has rights for sign signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: 112
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: snapshot repository_name: 112 signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}} repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97 repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'keyval': {u'public': u'228342cc8b78a65b8840ef5691a693d8c368e053a7e8e8f85faf7c83eff1e1d2', u'private': u'452249a89783145c16ca878eb76d22ec898f42c83e12b665d1677b057209d4c1'}} produced signature: {u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/snapshot.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'f93cfcf33d335ff43654ec6047e0a18dd5595ee3de53136b94c9c756788a0f97', u'sig': u'7b884075c2bfed5c0a9a2f533fa61299363579874cd6315623a8b4043f9a9db857e0a24c2b95528c891ffb9a6a29de57f67984c316d5996c7417360c42bcb507', u'method': u'ed25519'}], u'signed': {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: snapshot
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/snapshot.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Generating and writting metadata for rolename: timestamp metadata_filename: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/timestamp.der write_partial: False targets_directory: /home/joan/Escriptori/TFM/TFM/director/112/targets metadata_directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  Generating timestamp metadata object. The 'snapshot.json' file must exist.
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/snapshot.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [get_metadata_versioninfo()]:  Returning metadata version info for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: snapshot repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: snapshot
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  Returning Timestamp Metadata schema with corresponding format
	--------> [tuf/repository_lib.py]	>>Function:  [generate_timestamp_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_log_warning_if_expires_soon()]:  ...
u'timestamp.der' expires Thu Feb 13 19:50:28 2020 (UTC).
0.999988425925926 day(s) until it expires.
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/timestamp.der metadata_object: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with keyids: [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'] repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/timestamp.der' with key: da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: timestamp has rights for sign signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: 112
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: timestamp repository_name: 112 signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 0, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'580d6c31269a1716d2836237d5279da64afb48e88539cfe95b5e3fc0abd8bf391039d628d099072b4f29765bad549ea595923ce59dc2ab0f647586a3de0c2d00', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  Getting roleinfo of rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_roleinfo()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  Updating info for Role:  timestamp With roleinfo: {u'signatures': [], u'keyids': ['da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'], u'expires': u'2020-02-13T19:50:28Z', u'threshold': 1, u'version': 1, u'compressions': [u''], u'partial_loaded': False, u'signing_keyids': [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc']} Mark role as dirty: True repository name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [update_roleinfo()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing file: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/timestamp.der metadata_object: {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with keyids: [u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc'] repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  Signing:  u'/home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/timestamp.der' with key: da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]:  Signing data: {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'} with key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [sign_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  Creating signature for key_dict {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} and data for create it: ?
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  Checking crypto libraries required_libraries: [u'ed25519']
	-------- --------> [tuf/keys.py]	>>Function:  [check_crypto_libraries()]:  returning 
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  Creating signature with public_key: ? private_key: ? data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [create_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [create_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [sign_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  Write the metadata to file if it contains a threshold of signatures.
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]:  Verifying whether role: timestamp has rights for sign signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: 112
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]:  Getting signatures marked as signable for role: timestamp repository_name: 112 signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  Getting role keyids for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_keyids()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  Getting role threshold for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  Checking rolename for rolename: timestamp repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  Validating rolename for rolename: timestamp
	--------> [tuf/roledb.py]	>>Function:  [_validate_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [_check_rolename()]:  returning 
	--------> [tuf/roledb.py]	>>Function:  [get_role_threshold()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [get_signature_status()]: returning
	-------- --------> [tuf/sig.py]	>>Function:  [verify()]: returning
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  Removing invalid or duplicated signatures for signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}} repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  Getting key for keyid:  da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc repository_name: 112
	--------> [tuf/keydb.py]	>>Function:  [get_key()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	-------- --------> [tuf/sig.py]	>>Function:  [verify_signature_over_metadata()]: returning
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  Verifying whether the private key belonging to key_dict: {u'keytype': u'ed25519', u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'keyval': {u'public': u'd1ab5126fd6f0e30944910e81c0448044dfe9d5a39f478212b2afa913bb7ca7c', u'private': u'eedf737cc9867799e1f97245dfd1e1ed038e10e05466bedf020c553c596e3dce'}} produced signature: {u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'} using data: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  Determine whether the private key corresponding to public_key: ? produced signature: ? over data: ? using method: ?
	--------> [tuf/ed25519_keys.py]	>>Function:  [verify_signature()]:  returning 
	-------- --------> [tuf/keys.py]	>>Function:  [verify_signature()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_remove_invalid_and_duplicate_signatures()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/timestamp.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/timestamp.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  Writting metadata file at filename: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/timestamp.der
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  Checking if directory is valid. directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged
	--------> [tuf/repository_lib.py]	>>Function:  [_check_directory()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_get_written_metadata()]:  Returning actual content of metadata_signable: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  Converting signed metadata to der. signed_metadata: {u'signatures': [{u'keyid': u'da9c65c96c5c4072f6984f7aa81216d776aca6664d49cb4dfafbc7119320d9cc', u'sig': u'0c0126b565689007adffe837dd05d5c520ee335d93fad324cb65c67d433f92024b01a847353c3709fdbad33763c94b595e440f43d3eec2d6eddf1dab98c6fe0c', u'method': u'ed25519'}], u'signed': {'_type': u'Timestamp', 'version': 1, 'meta': {u'snapshot.der': {u'length': 217, u'version': 1, u'hashes': {u'sha256': '2ea8a0ea3603c526c928ffe9b765b8e76e6e90b830e1fe91235818f1adc115f7'}}}, 'expires': u'2020-02-13T19:50:28Z'}}
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  Ensuring valid metadata type for asn1. metadata_type: timestamp
	--------> [tuf/asn1_codec.py]	>>Function:  [_ensure_valid_metadata_type_for_asn1()]:  returning 
	--------> [tuf/asn1_codec.py]	>>Function:  [convert_signed_metadata_to_der()]:  returning 
	-------- --------> [tuf/util.py]	>>Function:  [get_file_details()]:  Returning file details for filepath: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged/timestamp.der hash_algorithms: [u'sha256']
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  Writting compressed metadata for file_object: <tuf.util.TempFile object at 0x7f87909aefd0>
	--------> [tuf/repository_lib.py]	>>Function:  [_write_compressed_metadata()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [write_metadata_file()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_generate_and_write_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.unmark_dirty()]:  Unmarking dirty roles: [u'timestamp', u'root', u'snapshot', u'targets']
	--------> [tuf/roledb.py]	>>Function:  [unmark_dirty()]:  unmarking dirty roles: [u'timestamp', u'root', u'snapshot', u'targets'] repository_name: 112
	--------> [tuf/roledb.py]	>>Function:  [unmark_dirty()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.unmark_dirty()]:  returning 
	--------> [tuf/repository_lib.py]	>>Function:  [_delete_obsolete_metadata()]:  Deleting obsolete metadata for metadata_directory: /home/joan/Escriptori/TFM/TFM/director/112/metadata.staged snapshot_metadata: {'_type': u'Snapshot', 'version': 1, 'meta': {u'targets.der': {u'version': 1}, u'root.der': {u'length': 631, u'version': 1, u'hashes': {u'sha256': '8c3a81447f89691cce55acbd21fc28cfc9c9b062dcc5a4f038575bb70190b3a0'}}}, 'expires': u'2020-02-19T19:50:28Z'} consistent_snapshot: False repository_name: 112
	--------> [tuf/repository_lib.py]	>>Function:  [_delete_obsolete_metadata()]:  returning 
	--------> [tuf/repository_tool.py]	>>Function:  [Repository.write()]:  returning 
Director: Director repo server process started, with pid 2854, serving on port 30401. Director repo URL is: 0.0.0.0:30401/
Director: Starting Director Services Thread: will now listen on port 30501

